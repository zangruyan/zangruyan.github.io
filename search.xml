<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[css-animation]]></title>
      <url>/2018/09/06/css-animation/</url>
      <content type="html"><![CDATA[<h3 id="css3动画解说"><a href="#css3动画解说" class="headerlink" title="css3动画解说"></a>css3动画解说</h3><blockquote>
<p>css3动画，不需要任何的触发，可以直接用css3就实现酷炫吊炸天的动画效果。<br>类似于flash，只需要知名两个状态，之间的过程由计算机自动计算.</p>
</blockquote>
<a id="more"></a>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote>
<p>animation: 动画名字 动画时长 缓动曲线 延迟时间 是否停留在终点（forwards） 动画执行的次数（具体的次数| infinite） 是否交替运动(alternate);</p>
</blockquote>
<ul>
<li>animation-name:动画名字;</li>
<li>animation-duration: 动画时长;</li>
<li>animation-timing-function: 缓动曲线;    默认为ease</li>
<li>animation-delay: 延迟时间;        默认为0s</li>
<li>animation-fill-mode: normal | forwards;   是否停留在终点。<ul>
<li>默认为normal：回到起点；</li>
<li>forwards表示停留在终点。</li>
</ul>
</li>
<li>animation-iteration-count: 次数 | infinite ;   默认为1次</li>
<li>animation-direction: normal | alternate;   是否交替运动，<ul>
<li>默认为normal</li>
<li>alternate表示交替运动。</li>
</ul>
</li>
<li>animation-play-state: running | paused;   设置动画是否处于播放或暂停状态。<ul>
<li>默认值为running(播放的)</li>
<li>paused表示暂停。</li>
</ul>
</li>
</ul>
<p>英文注解：</p>
<ul>
<li>alternate是alter的形容词，表示：可改变的，可替换的</li>
<li>infinity     ∞</li>
<li>infinite    是infinity的形容词，表示：无数次的</li>
<li>animal   动物</li>
<li>animate  vt.使…动，使…有生气</li>
<li>animation 是animate的名词，表示动画。</li>
</ul>
<h4 id="书写的步骤"><a href="#书写的步骤" class="headerlink" title="书写的步骤"></a>书写的步骤</h4><h4 id="第一步：用关键帧（-keyframes）定义自定义动画"><a href="#第一步：用关键帧（-keyframes）定义自定义动画" class="headerlink" title="第一步：用关键帧（@keyframes）定义自定义动画"></a>第一步：用关键帧（@keyframes）定义自定义动画</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*定义自定义动画*/</div><div class="line">@keyframes 动画名字&#123;</div><div class="line">     from&#123;</div><div class="line">        /*初始状态的CSS*/</div><div class="line">        left:10px;</div><div class="line">     &#125;</div><div class="line">     to&#123;</div><div class="line">       /*结束状态的CSS*/</div><div class="line">       left:100px;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> @keyframes 动画名字&#123;</div><div class="line">   0%&#123;</div><div class="line">       left:10px;</div><div class="line">   &#125;</div><div class="line">   50%&#123;</div><div class="line">       left:50px;</div><div class="line">   &#125;</div><div class="line">   100%&#123;</div><div class="line">       left:100px;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 1).可以只有to.<br> 2).可以用0%替换了from，表示起始状态，用100%替换to，表示结束状态。<br> 3).0%到100%之间可以加无数个百分比，表示当动画运行到当前时间时所处的状态。</p>
<h4 id="第二步：调用自定义动画。"><a href="#第二步：调用自定义动画。" class="headerlink" title="第二步：调用自定义动画。"></a>第二步：调用自定义动画。</h4><blockquote>
<p>在使用该动画的CSS选择器中，使用属性animation来调用该动画。<br>animation: 动画名字 动画时长;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/*调用自定义动画*/</div><div class="line">animation:move 1s  /*动画名字 动画时长*/</div></pre></td></tr></table></figure>
<h4 id="animate-和js-结合"><a href="#animate-和js-结合" class="headerlink" title="animate 和js 结合"></a>animate 和js 结合</h4><ul>
<li>通过class<ul>
<li>在css里加入animation的各种属性</li>
<li>直接给元素加-webkit-animation-xxx样式</li>
</ul>
</li>
<li>animation的问题<ul>
<li>写起来麻烦</li>
<li>没法动态改变目标点距离</li>
</ul>
</li>
<li>obj.addEventListener(‘webkitAnimationEnd’,function(){},false);</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css3-变形transform]]></title>
      <url>/2018/09/05/css3-transform/</url>
      <content type="html"><![CDATA[<h2 id="变形transform"><a href="#变形transform" class="headerlink" title="变形transform"></a>变形transform</h2><h3 id="二维变形"><a href="#二维变形" class="headerlink" title="二维变形"></a>二维变形</h3><h4 id="旋转变形"><a href="#旋转变形" class="headerlink" title="旋转变形"></a>旋转变形</h4><p> <b>transform:rotate(deg)</b>:deg表示度数，旋转函数，取值度数。如果参数写正值，表示顺时针旋转，或者说，由x轴正向向y轴正向旋转。如果写负值，表示逆时针，或说，由x轴正向向y轴负向旋转。<br> <a id="more"></a></p>
<ul>
<li>transform:rotateX(deg)</li>
<li>transform:rotateY(deg)</li>
<li><p>transform:rotate(deg,deg)</p>
<p><b>ps:baceface-visibility:hidden; 背面不可见属性</b></p>
<p><img src="/2018/09/05/css3-transform/1.jpg" alt=""></p>
<h4 id="斜切变形"><a href="#斜切变形" class="headerlink" title="斜切变形"></a>斜切变形</h4><p><b>transform:skew(deg1,deg2)</b>:deg1:y轴正向向x轴正向靠拢的角度,deg2:x轴正向向y轴正向靠拢的角度</p>
</li>
<li>transform:skewX(deg);</li>
<li>transform:skewY(deg);<br><img src="/2018/09/05/css3-transform/2.jpg" alt=""><h4 id="缩放变形"><a href="#缩放变形" class="headerlink" title="缩放变形"></a>缩放变形</h4><b>transform: scale(x轴缩放的比例, y轴缩放的比例)</b>:参数不可以写百分比。如果参数只写一个值，表示x轴和y轴都按照该比例缩放。</li>
<li>transform:scaleX();</li>
<li>transform:scaleY();<br><img src="/2018/09/05/css3-transform/3.jpg" alt=""><h4 id="位移变形"><a href="#位移变形" class="headerlink" title="位移变形"></a>位移变形</h4><b>transform: translate(沿x轴正向平移的距离, 沿y轴正向平移的距离)<b>:距离的单位:px|%<br>如果单位写%，那么第一个参数是相对于自身的宽度的百分比，第二个参数为相对于自身高度的百分。</b></b></li>
<li>transform:translateX(100px);</li>
<li>transform:translateY(100px);<br><img src="/2018/09/05/css3-transform/4.jpg" alt=""><h4 id="变形中心点控制"><a href="#变形中心点控制" class="headerlink" title="变形中心点控制"></a>变形中心点控制</h4><b>transform-origin: 变型中心点的横坐标 变型中心点的纵坐标</b>:变型中心点的坐标的取值：方位名词 | px | %<ul>
<li>元素的默认变型中心点为元素的正中心。<br>我们可以通过属性transform-origin来设置元素的变型中心点.<br>transform-origin需要给元素的默认样式加<br>transform-origin的默认值：center center</li>
</ul>
</li>
</ul>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p><b>matrix(a,b,c,d,e,f)</b>：矩阵函数</p>
<ul>
<li>缩放、位移、倾斜都可以通过矩阵函数实现。</li>
</ul>
<h3 id="三维变形"><a href="#三维变形" class="headerlink" title="三维变形"></a>三维变形</h3><blockquote>
<p>三维变型，需要加景深，又叫透视，表示人眼距离舞台的距离。这样，就会产生近大远小、近实远虚的透视效果。<br> persepctive: px; //人眼距离舞台的距离<br> PS：景深需要给演员所在的舞台加，不要给演员加。</p>
</blockquote>
<h4 id="旋转变型"><a href="#旋转变型" class="headerlink" title="旋转变型"></a>旋转变型</h4><ul>
<li>transform:rotate(deg)    默认是绕垂直于屏幕的Z轴进行旋转的。</li>
<li>transform:rotateX(deg)   绕X轴进行旋转 eg:体操单杠运动</li>
<li>transform:rotatey(deg)   绕Y轴进行旋转 eg:钢管舞</li>
<li>transform:rotateZ(deg)   绕Z轴进行旋转 eg:飞刀</li>
</ul>
<h4 id="位移变形-1"><a href="#位移变形-1" class="headerlink" title="位移变形"></a>位移变形</h4><ul>
<li>transform: translate(x轴正向的位移, y轴正向的位移)   2D的位移</li>
<li>transform: translate3D(x轴正向的位移, y轴正向的位移, Z轴正向的位移 )  3D位移</li>
<li>transform: translateX(x轴正向的位移)   沿X轴正向的位移</li>
<li>transform: translateY(y轴正向的位移)   沿y轴正向的位移</li>
<li><b>transform: translateZ(z轴正向的位移)   沿Z轴正向的位移。正值往前移动，负值往后移动</b></li>
</ul>
<h4 id="构建立方体所需要的属性"><a href="#构建立方体所需要的属性" class="headerlink" title="构建立方体所需要的属性"></a>构建立方体所需要的属性</h4><ul>
<li>transform-style: flat | preserve-3d;<ul>
<li>flat;    //莫认值，表示将该元素的子元素以2D平面的形式展示 flat  扁的，公寓</li>
<li>preserve-3d;   //将该元素的子元素以3D立体的形式展现</li>
</ul>
</li>
</ul>
<p>PS:transform-style需要给立方体加，不要给它的单个面加。建立3D空间，设置在父元素中，并且高于任何嵌套的变形元素，不能设置overflow:hidden;</p>
<h4 id="景深"><a href="#景深" class="headerlink" title="景深"></a>景深</h4><blockquote>
<p>persepctive: px; //人眼距离舞台的距离。<br>用户和元素3D空间Z平面间的距离，值小离得就近，看着就越大，值大就离得远，看着就越小。</p>
</blockquote>
<h4 id="透视点控制（景深基点）"><a href="#透视点控制（景深基点）" class="headerlink" title="透视点控制（景深基点）"></a>透视点控制（景深基点）</h4><ul>
<li>perspective-origin: 透视点的横坐标/透视点的纵坐标;透视点表示人眼看的位置。<ul>
<li>透视点的坐标的单位： px | % | 方位名词</li>
<li>perspective-origin的默认值: center center;</li>
</ul>
</li>
</ul>
<p>ps:透视点需要加舞台加，不要给立方体加。<br>单位如果写px或%，表示距离左上角的距离。</p>
<h4 id="3D旋转木马实例（借鉴张鑫旭）"><a href="#3D旋转木马实例（借鉴张鑫旭）" class="headerlink" title="3D旋转木马实例（借鉴张鑫旭）"></a>3D旋转木马实例（借鉴张鑫旭）</h4><ol>
<li>首先HTML结构,舞台-&gt;容器-&gt;图片</li>
<li>给舞台加一个视距，比如说，perspective: 800px;（依旧遵照那个规律，值越小越近，显示的也就越大，反之值越大越远，显示的就越小）</li>
<li>对于容器，加个3D视图声明，transform-style:preserve-3d</li>
<li>给图片加一个position:absolute，让图片公用同一个中心点。</li>
<li><p>图片旋转木马是类似钢管舞旋转的运动，因此，我们关心的是rotateY的大小。<br>因为要正好绕成一个圈，因此，图片rotateY值正好0~360等分，于是，如果有6张图片，则每个图片的旋转角度累加60(360 / 6 = 60)度即可。因此有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">img:nth-child(1) &#123; transform: rotateY(   0deg )&#125;</div><div class="line">img:nth-child(2) &#123; transform: rotateY(  60deg )&#125;</div><div class="line">img:nth-child(3) &#123; transform: rotateY( 120deg )&#125;</div><div class="line">img:nth-child(4) &#123; transform: rotateY( 180deg )&#125;</div><div class="line">img:nth-child(5) &#123; transform: rotateY( 240deg )&#125;</div><div class="line">img:nth-child(6) &#123; transform: rotateY( 300deg )&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>虽然每个图片的方位不同，都旋转了一定的程度，但是现在图片都挤在一起，所以就要用到transform:translateZ()拉开空间，当translateZ为正值的时候，元素会向其面对的方向走去；如果元素无旋转，就会朝显示器走来！！</p>
</li>
<li>往前走多少的话要根据一个数学公式去算的，反正我是数学忘光光了，直接浏览器跑的js算出来的<br>拿本demo距离，每张美女图片的宽度是231像素，因此，有如下理想方位效果图：<br><img src="/2018/09/05/css3-transform/5.jpg" alt=""><br>图中红色标注的r就是的demo页面中图片要translateZ的理想值（该值可以让所有图片无缝围成一个圆）！<br>据说r的计算很简单，有初中数学水平的人应该都会，bug，我早就还给老师了<br>r = 115.5 / Math.tan(30 / 180 * Math.PI) ≈ 200<br>为了好看图片之间留了点间距，使用的translateZ的值为200 + 20 = 220.</li>
<li>最后的最后，要让木马旋转起来，只要让容器每次旋转60度就可以了,js代码在下面贴出</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">	html,body,div,img&#123;margin:0;padding:0;&#125;</div><div class="line">	.banner&#123;perspective: 800px;&#125; /*景深*/</div><div class="line">	.box&#123;transform-style:preserve-3d;width: 231px;margin:0 auto;height: 100px;transition:all 1s;&#125;/*设置动画，建立为3D空间*/</div><div class="line">	.box img&#123;position:absolute;&#125;</div><div class="line">	.box img:nth-child(1) &#123; transform: rotateY(   0deg ) translateZ(220px); &#125;</div><div class="line">	.box img:nth-child(2) &#123; transform: rotateY(  60deg ) translateZ(220px); &#125;</div><div class="line">	.box img:nth-child(3) &#123; transform: rotateY(  120deg) translateZ(220px); &#125;</div><div class="line">	.box img:nth-child(4) &#123; transform: rotateY( 180deg ) translateZ(220px); &#125;</div><div class="line">	.box img:nth-child(5) &#123; transform: rotateY( 240deg ) translateZ(220px); &#125;</div><div class="line">	.box img:nth-child(6) &#123; transform: rotateY( 300deg ) translateZ(220px); &#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;banner&quot;&gt;</div><div class="line">	&lt;div class=&quot;box&quot;&gt;</div><div class="line">		&lt;img src=&quot;images/about_1.jpg&quot;&gt;</div><div class="line">		&lt;img src=&quot;images/about_2.jpg&quot;&gt;</div><div class="line">		&lt;img src=&quot;images/about_3.jpg&quot;&gt;</div><div class="line">		&lt;img src=&quot;images/about_4.jpg&quot;&gt;</div><div class="line">		&lt;img src=&quot;images/about_5.jpg&quot;&gt;</div><div class="line">		&lt;img src=&quot;images/about_6.jpg&quot;&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	var _box = document.getElementsByClassName(&apos;box&apos;)[0];</div><div class="line">	var n = 0;</div><div class="line">	_box.onclick = function()&#123;</div><div class="line">		console.log(&apos;1212&apos;);</div><div class="line">		n++;</div><div class="line">		this.style.transform = &apos;rotateY(&apos;+60*n+&apos;deg)&apos;;</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> css3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让IE678部分支持CSS3]]></title>
      <url>/2018/09/04/css3-PIE-IE678/</url>
      <content type="html"><![CDATA[<blockquote>
<p>尽管现在IE678已经被大多数公司摒弃，但是技术层面，还是想要提上一提的</p>
</blockquote>
<a id="more"></a>
<p>我们可以通过一个第三方的插件，让IE678支持部分的CSS3.<br><img src="/2018/09/04/css3-PIE-IE678/1.jpg" alt=""><br>第一步：引入PIE_IE678.js文件；<br>第二步：在使用CSS3的元素选择器中添加 behavior:url(js/PIE.htc);</p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> css3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html5将地理位置在地图上呈现]]></title>
      <url>/2018/08/30/html5-navigator/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一定要连网</p>
</blockquote>
<a id="more"></a>
<h3 id="第一步：需要有一个呈现地图的html容器-知了背调"><a href="#第一步：需要有一个呈现地图的html容器-知了背调" class="headerlink" title="第一步：需要有一个呈现地图的html容器.   知了背调"></a>第一步：需要有一个呈现地图的html容器.   知了背调</h3><h3 id="第二步：引入百度地图的API。"><a href="#第二步：引入百度地图的API。" class="headerlink" title="第二步：引入百度地图的API。"></a>第二步：引入百度地图的API。</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 先引入百度javascript版 API --&gt;</div><div class="line">&lt;script src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=0A5bc3c4fb543c8f9bc54b77bc155724&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</code></pre><h3 id="第三步：将用户的经纬度在百度地图上呈现"><a href="#第三步：将用户的经纬度在百度地图上呈现" class="headerlink" title="第三步：将用户的经纬度在百度地图上呈现"></a>第三步：将用户的经纬度在百度地图上呈现</h3><p><img src="/2018/08/30/html5-navigator/1.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> html5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> navigator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html5-多媒体-音频audio]]></title>
      <url>/2018/08/28/html5-audio/</url>
      <content type="html"><![CDATA[<h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><blockquote>
<p>音频可以认为是视频的阉割版<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法格式：</div><div class="line">&lt;audio src=”音频的资源地址”&gt;&lt;/audio&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="音频的标签属性"><a href="#音频的标签属性" class="headerlink" title="音频的标签属性"></a>音频的标签属性</h4><ul>
<li>src:用于指定音频的资源地址</li>
<li>controls:显示控制面板</li>
<li>loop:允许音频循环播放</li>
<li>preload:让音频预加载</li>
<li>autoplay:允许音频自动播放<br><img src="/2018/08/28/html5-audio/2.jpg" alt=""><br>由于版权的缘故，没有一种格式是所有浏览器都支持的。如果一个音频内容想让所有的浏览器都支持，那么就至少需要两种格式。H5中将src属性进行了拓展成了一个标签source标签，source标签需要嵌套在audio标签中，一个audio标签中可以嵌套多个source标签，然后将src属性写在source标签上。浏览器会从上往下依次判断，找第一个支持的音频格式，作为要播放的音频。</li>
</ul>
<p><img src="/2018/08/28/html5-audio/3.jpg" alt=""><br>video和audio是从IE9开始支持的。</p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> html5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> audio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html5多媒体-视频vedio]]></title>
      <url>/2018/08/28/html5-vedio/</url>
      <content type="html"><![CDATA[<h3 id="视频可以认为图像的升级版"><a href="#视频可以认为图像的升级版" class="headerlink" title="视频可以认为图像的升级版"></a>视频可以认为图像的升级版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法格式：&lt;video&gt;&lt;/video&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="视频的标签属性"><a href="#视频的标签属性" class="headerlink" title="视频的标签属性"></a>视频的标签属性</h4><ul>
<li>src:用于指明视频的资源地址</li>
<li>width:定视频的宽度</li>
<li>height:设定视频的高度。通常宽高控制之一即可</li>
<li>controls:显示控制面板。默认，控制面板不显示</li>
<li>poster=”:海报图片的资源地址”用于设定海报</li>
<li>loop:允许视频循环播放</li>
<li>preload:让视频预加载。</li>
<li>autoplay:让视频自动播放.(当设置了autoplay之后，preload会自动的失效).</li>
</ul>
<h4 id="视频支持的格式"><a href="#视频支持的格式" class="headerlink" title="视频支持的格式"></a>视频支持的格式</h4><p><img src="/2018/08/28/html5-vedio/1.jpg" alt=""><br>由于版权的缘故，没有一种视频格式是所有浏览器都支持的。如果一个视频内容想让所有的浏览器都支持，那么至少需要两种格式。HTML5将src属性拓展成了一个标签source，source需要嵌套在video标签中，一个video标签中可以嵌套多个source标签，将src属性写在soure标签上。浏览器从上往下依次判断第一个支持的视频格式，作为要播放的视频。<br><img src="/2018/08/28/html5-vedio/2.jpg" alt=""></p>
<h3 id="视频控制"><a href="#视频控制" class="headerlink" title="视频控制"></a>视频控制</h3><ul>
<li><p>视频的属性：</p>
<ul>
<li>.paused: 用于判断视频是否是暂停的，如果视频是暂停的，那么.paused为true；如果视频为播放的，那么.paused为false。只可以读取，不可以设置。</li>
<li>.currentTime:得到当前视频播放的秒数。既可以获取，又可以设置</li>
<li>.duration:得到视频的总长(秒数)</li>
<li>.playbackRate:视频的当前速率。1表示正常速率。既可以获取，又可以设置</li>
<li>.muted:读取/设置视频是否处于静音状态。既可以获取，又可以设置</li>
<li>.volume:表示当前音量，1表示最大音量，0表示最小音量。既可以获取，又可以设置</li>
</ul>
</li>
<li><p>视频的方法：</p>
<ul>
<li>.play(): 播放视频</li>
<li>.pause(): 暂停视频</li>
</ul>
</li>
<li><p>视频的事件：</p>
<ul>
<li>ended:当视频结束的时候触发</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> html5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vedio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[margin常见问题]]></title>
      <url>/2018/08/28/css-margin/</url>
      <content type="html"><![CDATA[<blockquote>
<p><b>块状元素在垂直方向上有重叠现象</b></p>
</blockquote>
<h3 id="父元素和第一个子元素的margin-top出现重叠。如下"><a href="#父元素和第一个子元素的margin-top出现重叠。如下" class="headerlink" title="父元素和第一个子元素的margin-top出现重叠。如下:"></a>父元素和第一个子元素的margin-top出现重叠。如下:</h3><p><img src="/2018/08/28/css-margin/1.jpg" alt=""><br><a id="more"></a><br>原因是：此时div的margin-top是自动的，由于这种情况下，它们会现margin-top重叠的情况，所以父元素与子元素之间，取margin-top大的那个值为准。<br>如下，也会以50px为准。<br><img src="/2018/08/28/css-margin/2.jpg" alt=""><br>解决方案：<br>给父元素加border<br>给父元素加padding</p>
<h3 id="兄弟之间在垂直方向margin重合："><a href="#兄弟之间在垂直方向margin重合：" class="headerlink" title="兄弟之间在垂直方向margin重合："></a>兄弟之间在垂直方向margin重合：</h3><p><img src="/2018/08/28/css-margin/3.jpg" alt=""><br>一样，取相邻的margin值大的那个。由于这里margin是相等，所以表现出来就是完全重合的。</p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[border画三角形]]></title>
      <url>/2018/08/28/css-border/</url>
      <content type="html"><![CDATA[<h2 id="border画三角形"><a href="#border画三角形" class="headerlink" title="border画三角形"></a>border画三角形</h2><p><img src="/2018/08/28/css-border/css-border-1.jpg" alt=""><br><a id="more"></a><br>要想得到一个三角形，可以把其它三边的颜色设置为背景色。<br>如：<br>只要向下的三角形，保留上边框的颜色，把其它的三边设置为背景色。<br><img src="/2018/08/28/css-border/css-border-2.jpg" alt=""><br>只要向右的三角形，保留左边框的颜色，把其它的三边设置为背景色。</p>
<p><img src="/2018/08/28/css-border/css-border-3.jpg" alt=""><br>进一步改进：#fff只适用背景也是白色的情况。</p>
<p><img src="/2018/08/28/css-border/css-border-4.jpg" alt=""><br>这种情况就不行了。所以，我们写成透明色：transparent。<br><img src="/2018/08/28/css-border/css-border-5.jpg" alt=""><br>边框的粗细决定三角形的大小 。</p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清除浮动float]]></title>
      <url>/2018/08/27/css-float/</url>
      <content type="html"><![CDATA[<h2 id="清除浮动带来的影响"><a href="#清除浮动带来的影响" class="headerlink" title="清除浮动带来的影响"></a>清除浮动带来的影响</h2><blockquote>
<p>为什么要清除影响?原因它会破坏标准的文档流。</p>
</blockquote>
<a id="more"></a>
<h3 id="方法一：给父元素加高度"><a href="#方法一：给父元素加高度" class="headerlink" title="方法一：给父元素加高度"></a>方法一：给父元素加高度</h3><p>如下代码，是一个常见的网页结构：<br><img src="/2018/08/27/css-float/1.jpg" alt=""><br>由于ul中的三个li都浮动，这个浮动产生的破坏性，会沿续到.main的身上。所以p标签中的内容就去填空这个浮动产生的空缺。由于“半脱离”的特性，文字不能填到三个菜单的下方，而是在它们的后面摆放。</p>
<p>解决方法是给ul加高度：<br><img src="/2018/08/27/css-float/2.jpg" alt=""></p>
<h3 id="方法二：给父元素设置Overflow-hidden"><a href="#方法二：给父元素设置Overflow-hidden" class="headerlink" title="方法二：给父元素设置Overflow:hidden"></a>方法二：给父元素设置Overflow:hidden</h3><p>此时，不给父级元素明确的高度，而是设置overflow属性。</p>
<p>样式如下：<br><img src="/2018/08/27/css-float/3.jpg" alt=""></p>
<p>结构如下：<br><img src="/2018/08/27/css-float/4.jpg" alt=""><br>效果如下：<br><img src="/2018/08/27/css-float/5.jpg" alt=""></p>
<p>原理：overflow:hidden。效果是如果元素的内容超出了它的尺寸，就会把超出的部分隐藏。<br><br>这里达到清除浮动的影响的效果，原因是：<br><br>既然是要超出部分隐藏。我们没有给父元素设置高度，为了比较父元素的高度和内容的高度，就要先算出父元素的高度，所以它就要考虑父元素当中所有子元素的高度，它就会引起浏览器的“重绘”的操作，这个操作就会纠正浮动引起的父元素高度塌陷的问题。</p>
<h4 id="Overflow属性指定如果内容溢出一个元素的框，会发生什么。"><a href="#Overflow属性指定如果内容溢出一个元素的框，会发生什么。" class="headerlink" title="Overflow属性指定如果内容溢出一个元素的框，会发生什么。"></a>Overflow属性指定如果内容溢出一个元素的框，会发生什么。</h4><p>默认值：visible。可见的。<br><img src="/2018/08/27/css-float/6.jpg" alt=""><br>默认效果如下：<br><img src="/2018/08/27/css-float/7.jpg" alt=""></p>
<p>取值：<br><br>visible 默认值。内容不会被修剪，会呈现在元素框之外。<br><br>hidden 内容会被修剪，并且其余内容是不可见的。<br><br>scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容<br></p>
<p>设置hidden后：<br><img src="/2018/08/27/css-float/8.jpg" alt=""></p>
<p>设置为scroll后：</p>
<p><img src="/2018/08/27/css-float/9.jpg" alt=""></p>
<h3 id="方法三：用clear-both清除浮动元素的影响："><a href="#方法三：用clear-both清除浮动元素的影响：" class="headerlink" title="方法三：用clear:both清除浮动元素的影响："></a>方法三：用clear:both清除浮动元素的影响：</h3><h4 id="clear让自己不受上一个浮动元素的影响"><a href="#clear让自己不受上一个浮动元素的影响" class="headerlink" title="clear让自己不受上一个浮动元素的影响"></a>clear让自己不受上一个浮动元素的影响</h4><p>取值：<br>None | right |left |both<br></p>
<blockquote>
<p>作用：clear 属性规定元素的哪一侧不允许浮动元素。</p>
</blockquote>
<p>如：<br><br>.div{clear:left}<br><br>.div元素很有个性：它不允许它的左边出现左浮动的元素。如果出现了，自己换行。改变自己，遵守它的规则。<br></p>
<p>示例：<br><img src="/2018/08/27/css-float/10.jpg" alt=""><br><img src="/2018/08/27/css-float/11.jpg" alt=""><br>改变自己。<br><br>建议使用:clear:both;</p>
<h4 id="实际操作如下："><a href="#实际操作如下：" class="headerlink" title="实际操作如下："></a>实际操作如下：</h4><p><img src="/2018/08/27/css-float/12.jpg" alt=""><br>这里有一个问题：我们会多出一个完全没有意义的div，我们只是利用它来清除它前面的元素由于浮动而产生的影响。<br></p>
<p>程序员为了少写这一句，利用css3伪元素after。给父元素添加一个类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.clearfix:after&#123;content:””;display:block;height:0;overflow:hidden;clear:both;&#125;</div><div class="line">.clearfix&#123;*zoom:1&#125;; /*照顾ie浏览器低版本&lt;ie8的感受，达到类似的效果*/</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nvm 重启终端失效的解决方法]]></title>
      <url>/2018/08/16/20170801-nvm-restart-failure/</url>
      <content type="html"><![CDATA[<h2 id="brew安装"><a href="#brew安装" class="headerlink" title="brew安装"></a>brew安装</h2><ol>
<li>我们需要按照上面提供的方法,首先在用户更目录下 创建 .nvm 文件,在终端中输入 mkdir ~/.nvm</li>
<li>然后去编辑你的 bash 配置文件 $HOME/.bashrc ,如果你使用 zsh 那么编辑 $HOME/.zshrc 配置文件,分别是 nano ~/.bashrc 与 nano ~/.zshrc</li>
<li>把下面的内容粘贴进去<a id="more"></a></li>
</ol>
<ul>
<li>通过 brew install nvm 来安装的nvm粘贴此段</li>
<li>export NVM_DIR=~/.nvm 与 source $(brew –prefix nvm)/nvm.sh</li>
</ul>
<ol>
<li>最后让你的 shell 配置及时生效,分别是 source ~/.bashrc 与 source ~/.zshrc</li>
</ol>
<hr>
<h2 id="curl安装"><a href="#curl安装" class="headerlink" title="curl安装"></a>curl安装</h2><ol>
<li><p>打开终端键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.7/install.sh  bash</div></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量(已有 .bash_profile)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</div></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量(无 .bash_profile)</p>
</li>
</ol>
<ul>
<li>添加 .bash_profile在终端键入 touch ~/.bash_profile</li>
<li>打开 .bash_profile在终端键入 open -e .bash_profile</li>
<li>在 .basn_profile中输入 export NVM_DIR=”$HOME/.nvm” 与 [ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh” # This loads nvm 两行代码</li>
</ul>
<ol>
<li><p>运行配置文件,在终端键入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
</li>
<li><p>查看配置路径,在终端键入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$PATH</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> nvm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nvm </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node Package Manager[NPM]]]></title>
      <url>/2018/08/15/20170803-npm/</url>
      <content type="html"><![CDATA[<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><blockquote>
<p>node包管理工具(器)，用来管理和维护项目中所用到的一些第三方的代码</p>
</blockquote>
<h2 id="官网：https-npmjs-org"><a href="#官网：https-npmjs-org" class="headerlink" title="官网：https://npmjs.org/"></a>官网：<a href="https://npmjs.org/" target="_blank" rel="external">https://npmjs.org/</a></h2><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><blockquote>
<p>当前项目／包的说明配置文件，以及其他一些关于当前项目的说明，该文件内必须最少包含下面两个字段</p>
<ul>
<li>name：包的名称</li>
<li>version: 包的版本</li>
<li>dependencies:可选的</li>
</ul>
</blockquote>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul>
<li><p>npm</p>
<blockquote>
<p>直接输入npm 命令，不带任何的参数和选项的话，那么就可以看到npm的使用说明</p>
</blockquote>
</li>
<li><p>npm install &lt;包名&gt;／别名 npm i &lt;包名&gt;</p>
<ul>
<li>在当前运行该命名的目录下安装指定的软件包，如果该目录下不存在node_modules目录，然后把包安装在当前目录的node_modules下</li>
<li>–save / -S:安装当前包的同时，添加该安装包的信息到当前项目的package.json的directories中</li>
</ul>
</li>
</ul>
<h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><blockquote>
<p>初始化一个项目，并且自动生成package.js</p>
</blockquote>
<h2 id="npm-uninstall-lt-包名-gt-npm-un-lt-包名-gt"><a href="#npm-uninstall-lt-包名-gt-npm-un-lt-包名-gt" class="headerlink" title="npm uninstall &lt;包名&gt; / npm un &lt;包名&gt;"></a>npm uninstall &lt;包名&gt; / npm un &lt;包名&gt;</h2><blockquote>
<p>卸载指定的安装包，如果想同时从dependencies中删除依赖信息的话，可以加上 –save/-S</p>
</blockquote>
<h2 id="npm-update-lt-包名-gt"><a href="#npm-update-lt-包名-gt" class="headerlink" title="npm update &lt;包名&gt;"></a>npm update &lt;包名&gt;</h2><h2 id="npm-search-lt-包名-gt"><a href="#npm-search-lt-包名-gt" class="headerlink" title="npm search &lt;包名&gt;"></a>npm search &lt;包名&gt;</h2><h2 id="本地安装／全局安装"><a href="#本地安装／全局安装" class="headerlink" title="本地安装／全局安装"></a>本地安装／全局安装</h2><ul>
<li>本地安装：把包安装到当前项目目录下（node_nodules）</li>
<li>全局安装：把包安装到当前系统（电脑）的全剧目录下</li>
<li>区别：安装在本地的包，只能该项目以及该项目下的子目录文件才能访问，安装在全局的包，在整个系统下都可以使用</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> npm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（九 - 运算符、对象、循环）]]></title>
      <url>/2017/10/25/javascript-9/</url>
      <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>1.赋值运算符<ul>
<li>=、+=、-=、*=、/=、%=</li>
</ul>
</li>
<li><p>2.算数运算符：运算符都只有数字运算的功能，所以在使用的时候，都会把其他类型专程数字。</p>
  <a id="more"></a>
<ul>
<li>“+”<ul>
<li>1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串</li>
<li>2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。</li>
</ul>
</li>
<li>“-“</li>
<li>“*”</li>
<li>“/“</li>
<li>“%”：取模等于求余数【任何数%n = (0 ~ n-1)】</li>
<li>++</li>
<li>“–”</li>
<li>注意：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var i = 0;</div><div class="line">alert(i++); //0</div><div class="line">alert(i); //1</div><div class="line"></div><div class="line">var j = 0;</div><div class="line">j++;</div><div class="line">alert(j);//1</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>3.关系运算符</p>
<ul>
<li>“&lt;”、”&gt;”、”&lt;=”、”&gt;=”、==、!=、===、”!==”</li>
</ul>
</li>
<li>-&gt;扩展：<ul>
<li>== 和 “===”，以及!= 和!==的区别。<ul>
<li>“==” 和 !=：会进行隐式类型转换，把左右两侧的数据类型转换成一个的之后，再去比较。</li>
<li>=== 和!==：进行比较的时候，也会比较数据类型，数据类型不一样不会进行比较，则判定两边不相等。</li>
</ul>
</li>
</ul>
</li>
<li><p>4.逻辑运算符</p>
<ul>
<li><p>||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。</p>
<ul>
<li>&amp;&amp;：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；</li>
<li>！：否、取反，把当前的值转换成布尔值，然后取反，返回的结果是布尔值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//条件成立，执行某件事</div><div class="line">var a = 0;</div><div class="line">var b = 2;</div><div class="line">function fn()&#123;</div><div class="line">    alert(1);</div><div class="line">&#125;</div><div class="line">(a&lt;b) &amp;&amp; fn();</div><div class="line"></div><div class="line">//条件不成立，执行某件事</div><div class="line">(a &gt; b)||fn();</div><div class="line">if(a &gt; b) &#123;</div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line">	fn();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>5.三元运算符</p>
<blockquote>
<p>判断条件？成立执行的语句:不成立执行的语句</p>
</blockquote>
</li>
<li><p>条件成立返回：成立执行的结果</p>
</li>
<li><p>条件不成立返回：不成立执行的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">var b = 12;</div><div class="line">var c = a &gt; b ? a:b;</div><div class="line"></div><div class="line"></div><div class="line">eg:</div><div class="line">window.onload = function() &#123;</div><div class="line">	var btn = document.querySelector(&apos;input&apos;);</div><div class="line">	var box = document.querySelector(&apos;#box&apos;);</div><div class="line">	var isHide = true;</div><div class="line">	btn.onclick = function()&#123;</div><div class="line">		/*if(isHide) &#123;</div><div class="line">			box.style.display = &quot;block&quot;;</div><div class="line">		&#125; else &#123;</div><div class="line">			box.style.display = &quot;none&quot;;</div><div class="line">		&#125;*/</div><div class="line">		//box.style.display = isHide?&quot;block&quot;:&quot;none&quot;;</div><div class="line">		isHide?box.style.display = &quot;block&quot;:box.style.display = &quot;none&quot;;</div><div class="line">		isHide = !isHide;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>6.运算符的优先级</p>
</li>
</ul>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li><p>continue 跳出==本次循环==（不能写到三元运算符中）</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for(var i = 0;i&lt;5;i++)&#123;</div><div class="line">    if(i==3)&#123;</div><div class="line">        continue;//跳出本次循环</div><div class="line">    &#125;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>break  终止==整个循环==</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for(var i = 0;i&lt;5;i++)&#123;</div><div class="line">    if(i==3)&#123;</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>break 默认只会终止包着它的循环。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">for(var i = 0;i&lt;5;i++)&#123;</div><div class="line">    for(var j=0;j&lt;5;j++)&#123;</div><div class="line">        if(i==3&amp;&amp;j==3)&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        console.log(i,j);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//终止指定的for循环</div><div class="line">name:for(var i = 0;i&lt;5;i++)&#123;</div><div class="line">    for(var j=0;j&lt;5;j++)&#123;</div><div class="line">        if(i==3&amp;&amp;j==3)&#123;</div><div class="line">            break name;</div><div class="line">        &#125;</div><div class="line">        console.log(i,j);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote>
<p>是一种复杂类型的数据，在对象中我们可以存储任意类型的数据</p>
<ul>
<li>对象存储数据，是存在对象的属性中</li>
<li>==对象是没有length这个值的==</li>
<li>属性赋值：obj.key = value;</li>
<li>属性操作：<ul>
<li>第一种方式：<ul>
<li>读操作：obj.属性名;</li>
<li>写操作：ojb.属性名 = 属性值;</li>
<li>obj.key = value;//键值对</li>
</ul>
</li>
<li>第二种方式：<ul>
<li>读操作：obj[“属性名”];</li>
<li>写操作：ojb[“属性值”] = 属性值;</li>
<li>obj[“key”] = value;//键值对</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<pre><code>**【注意：第二种操作方法[]写的是一个字符串，如果说我们的属性名想要存在变量中，只能用[]这种方式。】**
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var w = &quot;width&quot;;</div><div class="line">//注意第一种属性操作是写死的一个值，不能使用变量obj.w，这么写就认为在找obj的属性</div><div class="line">console.log(obj.w);</div><div class="line">//第二种属性操作，接受的是一个字符串，字符串就可以存在变量中，可以直接写obj[变量调用]</div><div class="line">console.log(obj[w]);</div></pre></td></tr></table></figure>
</code></pre><h2 id="循环-1"><a href="#循环-1" class="headerlink" title="循环"></a>循环</h2><h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><blockquote>
<p>判断这个对象中是否存在该属性，返回的是false或者是true；</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;&#125;;</div><div class="line">obj[&apos;name&apos;] = &quot;Leo&quot;;</div><div class="line">obj[&apos;age&apos;] = 40;</div><div class="line">obj[&apos;gender&apos;] = &quot;female&quot;;</div><div class="line">obj[&apos;width&apos;] = &quot;180px&quot;;</div><div class="line">obj[&apos;height&apos;] = &quot;180px&quot;;</div><div class="line">obj[&apos;children&apos;] = [&quot;大明&quot;,&quot;小明&quot;,&quot;三明&quot;];</div><div class="line"></div><div class="line">alert(&quot;name&quot; in obj); // obj 有 name属性就返回 true，否则 返回false</div><div class="line"></div><div class="line">for (var s in obj) &#123; //通过 in 方法，每次循环的时候把 循环变量s 变成obj对应属性名字</div><div class="line">    console.log(s,obj[s]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="for-in：可以用来循环-对象和数组，不能用来循环一组元素。"><a href="#for-in：可以用来循环-对象和数组，不能用来循环一组元素。" class="headerlink" title="for in：可以用来循环 对象和数组，不能用来循环一组元素。"></a>for in：可以用来循环 对象和数组，不能用来循环一组元素。</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var arr = [1,4,23];</div><div class="line">/*</div><div class="line">    for in 可以用来循环 对象和数组,不能用来循环一组元素</div><div class="line">    for 只能用来循环 数组和类数组(一组元素)</div><div class="line">*/</div><div class="line">for (var s in arr) &#123; // 找到 arr上的所有属性,s会依次变成 arr的属性名</div><div class="line">    console.log(s,arr[s]);// s的类型是字符串</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="for-只能用来循环-数组和类数组（一组元素）"><a href="#for-只能用来循环-数组和类数组（一组元素）" class="headerlink" title="for 只能用来循环 数组和类数组（一组元素）"></a>for 只能用来循环 数组和类数组（一组元素）</h3><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul>
<li>语法：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">while(判断语句)&#123;</div><div class="line">    执行语句;</div><div class="line">    自增;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var i = 0;</div><div class="line">while(i &lt; 5)&#123;</div><div class="line">	console.log(i);</div><div class="line">	i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch:"></a>switch:</h3><ul>
<li><p>语法：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var a = 15;</div><div class="line">switch(a) &#123;</div><div class="line">    case 10: // 当 a == 10</div><div class="line">    	console.log(&quot;我想给大家放天假&quot;);</div><div class="line">    	break; //a == 10的语句结束之后 添加break</div><div class="line">    case 15: // 当 a == 15</div><div class="line">    	console.log(&quot;当然我就是想想&quot;);</div><div class="line">    	break;</div><div class="line">    case 20: // 当 a == 20</div><div class="line">    	console.log(&quot;其实我真正想的是带大家出去玩&quot;);</div><div class="line">    	break;</div><div class="line">    default: //以上所有的判断都不成立</div><div class="line">    	console.log(&quot;还是写作业吧&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>穿刺</p>
<ul>
<li>1.case成立会把他下边所有的代码都执行了，直到遇到break</li>
<li>2.如果没写鞋break的话，就会形成穿刺现象，把下边所有的代码都执行了。</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运算符 </tag>
            
            <tag> 对象 </tag>
            
            <tag> 循环 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（八 - 类型划分）]]></title>
      <url>/2017/10/25/javascript-8/</url>
      <content type="html"><![CDATA[<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h2 id="数据类型划分"><a href="#数据类型划分" class="headerlink" title="数据类型划分"></a>数据类型划分</h2><h3 id="1、标准指定的类型划分："><a href="#1、标准指定的类型划分：" class="headerlink" title="1、标准指定的类型划分："></a>1、标准指定的类型划分：</h3><ul>
<li>基本类型：<ul>
<li>1.number（数字）</li>
<li>2.string（字符串）</li>
<li>3.undefined（未定义）</li>
<li>4.boolean（布尔值）</li>
<li>5.null（空对象）找不到对象，对象未定义。与非空对象最大区别在于是否能进行属性操作。<a id="more"></a></li>
</ul>
</li>
<li>对象类型（复合类型）：object(对象)，包含Array;<h3 id="2、typeof的方式划分"><a href="#2、typeof的方式划分" class="headerlink" title="2、typeof的方式划分"></a>2、typeof的方式划分</h3><blockquote>
<p>typeof是一种运算符，用来查看类型。</p>
</blockquote>
</li>
<li>1.number:【从负无穷到正无穷的数字及NaN=》not a Number】<ul>
<li>Number.POSITIVE_INFINITY 正无穷</li>
<li>Number.NEGATIVE_INFINITY 负无穷</li>
</ul>
</li>
<li>2.string:【字符串，任何包含在引号中的一串字符，都属于字符串】</li>
<li>3.boolean:【true或false两种值，布尔值】</li>
<li><p>4.object:数组、null、元素对象(Element)、object【注意：空数组不等同于空对象，因为空数组可以进行操作，空对象不能进行属性操作】</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(null == arr);</div></pre></td></tr></table></figure>
</li>
<li><p>5.function:函数类型</p>
</li>
<li>6.undefined：未定义。</li>
<li>7.NaN：非数字 not a number [类型是number]<ul>
<li>1.NaN不等于任何东西，并且不等于它自己。</li>
<li>2.检测一个内容是否是NaN的时候，可以使用isNaN();</li>
<li>3.数据类型：number;</li>
<li>4.NaN不能用来做比较。</li>
<li>5.isNaN(要检测的内容) return:true/false,isNaN 隐式调用的是Number。<ul>
<li>如果转化结果是一个数字就返回false</li>
<li>如果不是一个数字就返回true</li>
<li>isNaN会进行隐式类型转换，转换所调用的方法是Number<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = Number(&quot;10px&quot;);//NaN</div><div class="line">var b = Number(&quot;10px&quot;);//NaN</div><div class="line">//alert(a == b);// false</div><div class="line">alert(isNaN(&quot;$30.2&quot;))//true;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="调试："><a href="#调试：" class="headerlink" title="调试："></a>调试：</h2><ul>
<li>console.log();//只是打印出一个元素或值等。</li>
<li>console.dir();//打印对象。</li>
</ul>
<h2 id="数据类型的转换。"><a href="#数据类型的转换。" class="headerlink" title="数据类型的转换。"></a>数据类型的转换。</h2><ul>
<li><p>强制类型转换，或者显示类型转换。</p>
<ul>
<li><p>字符串转换数字（强制）：</p>
<ul>
<li><p>1.parseInt:取整 (要转换的数字,传进来的数字的进制值)</p>
<blockquote>
<p>从左向右一位一位去查看，如果遇到一位是非数字的，结束执行，把这位之前的数字返回</p>
</blockquote>
</li>
<li><p>2.parseFloat：转换成小数 (转换为浮点数)</p>
<blockquote>
<p>从左向右一位一位的匹配，直到遇到一个非数字（可以匹配一个小数点）就返回这位前边的数字</p>
</blockquote>
</li>
<li><p>3.Number(要转换的数字)</p>
<blockquote>
<p>从左向右看完所有的字符，如果完全符合数字的规则就转换，如果不符合数字的规则就返回NaN</p>
</blockquote>
</li>
<li><p>【注意：关于数组：】</p>
<ul>
<li>1.空数组转为0；（Number转的方式）</li>
<li>2.数组只有一位的时候，会用这位(代表他本身)去转换，并且只转换数字和字符串为数字的，其他的都是NaN</li>
<li>3.数组有多位的时候，只会被转换为NaN</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var num = false;//true = 1;false = 0;</div><div class="line">var nub;//NaN（undefined）;</div><div class="line">var nub = null //0;</div><div class="line">var nub = document; //NaN;</div><div class="line">var nub = [];//0;</div><div class="line">var nub = [0];//0;</div><div class="line">var nub = [10];//10</div><div class="line">var nub = [10,2];//NaN</div><div class="line">var nub = [&apos;aaa&apos;] //NaN</div><div class="line">var nub = [&apos;10&apos;]//10</div><div class="line">var nub = function()&#123;&#125;//NaN</div><div class="line">var nub = undefined;//NaN</div><div class="line">nub = Number(nub);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>强制转成字符串</p>
<ul>
<li><p>toString();【要转换的内容.toString】</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 123;</div><div class="line">a = a.toString(); //将数字123专为字符串类型</div><div class="line">console.log(a,typeof a);123 string;</div><div class="line">var b = [&apos;&apos;,&apos;2&apos;];</div><div class="line">b = b.toString();</div><div class="line">console.log(b,typeof b);//,2 string</div></pre></td></tr></table></figure>
</li>
<li><p>String(要转换的内容)</p>
</li>
</ul>
</li>
<li><p>强制转成布尔值<br>  Boolean（要转换的内容）</p>
<ul>
<li>真：true,非空字符串，非0数字，非空对象。</li>
<li><p>假：false，空字符串，0，NaN，null，undefined</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">!取反</div><div class="line">alert(!&quot;21323&quot;);//false</div><div class="line">alert(Boolean(123));//true</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a;</div><div class="line">if(a)&#123;</div><div class="line">    alert(&quot;真&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">    alert(&quot;假&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>隐式类型转换</p>
<blockquote>
<p>浏览器自己进行转换，其他类型转换成数字，主要调取Number</p>
</blockquote>
<ul>
<li>“+、+=”：<ul>
<li>1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串</li>
<li>2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。</li>
</ul>
</li>
<li><p>“-“、”<em>“、”/“、”%”、”-=”、”</em>=”、”/=”、”%=”：运算符左右两侧转换成数字进行运算：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(null + false,0 + function()&#123;&#125;);//0 &quot;0function()&#123;&#125;&quot;</div><div class="line">var nub = &quot;20px&quot;;//NaN</div><div class="line">var nub2 = &quot;30px&quot;;//NaN</div><div class="line">console.log(nub/nub2);//NaN</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li><p>关系运算符： || 、 &amp;&amp; 、！</p>
<ul>
<li><p>||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。</p>
</li>
<li><p>&amp;&amp;：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//条件成立，执行某件事</div><div class="line">var a = 0;</div><div class="line">var b = 2;</div><div class="line">function fn()&#123;</div><div class="line">    alert(1);</div><div class="line">&#125;</div><div class="line">(a&lt;b) &amp;&amp; fn();</div><div class="line"></div><div class="line">//条件不成立，执行某件事</div><div class="line">(a &gt; b)||fn();</div><div class="line">if(a &gt; b) &#123;</div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line">	fn();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="讲解剖析-【找出数组中最大的值】"><a href="#讲解剖析-【找出数组中最大的值】" class="headerlink" title="讲解剖析 【找出数组中最大的值】"></a>讲解剖析 【找出数组中最大的值】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var arr = [123,1,324,1233,20,-32,100];//定义一个数组</div><div class="line">var max = 0;//给一个最初比较的值</div><div class="line">/*</div><div class="line">    在这里，max可以设置成负无穷,以下是常量。</div><div class="line">	Number.POSITIVE_INFINITY 正无穷</div><div class="line">	Number.NEGATIVE_INFINITY 负无穷</div><div class="line">*/</div><div class="line">//循环数组</div><div class="line">for(var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">    //如果max小于arr[i],说明arr[i]比max大，所以把它的值赋给max。</div><div class="line">	if(max &lt; arr[i])&#123;</div><div class="line">		max = arr[i];</div><div class="line">	&#125;</div><div class="line">	//返回最大的【也可直接用这种方式】</div><div class="line">	//max = Math.max(max,arr[i]);</div><div class="line">&#125;</div><div class="line">alert(max);</div></pre></td></tr></table></figure>
<h2 id="讲解剖析【取模】"><a href="#讲解剖析【取模】" class="headerlink" title="讲解剖析【取模】"></a>讲解剖析【取模】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var list = document.querySelector(&apos;.list&apos;);</div><div class="line">var colors = [&quot;red&quot;,&quot;yellow&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;pink&quot;];</div><div class="line">var inner = &quot;&quot;;</div><div class="line">// red blue yellow</div><div class="line">for(var i = 0; i &lt; 20; i++)&#123;</div><div class="line">    /*第一种方式，比较笨*/</div><div class="line">    /*if(i%3 == 0)&#123;</div><div class="line">    	inner += &apos;&lt;li style=&quot;background:red&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</div><div class="line">    &#125; else if(i%3 == 1) &#123;</div><div class="line">    	inner += &apos;&lt;li style=&quot;background:blue&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</div><div class="line">    &#125; else if(i%3 == 2) &#123;</div><div class="line">    	inner += &apos;&lt;li style=&quot;background:yellow&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</div><div class="line">    &#125;*/</div><div class="line">    /*第二种方式，不会有颜色多少的限制，可扩展性比较好，代码量少*/</div><div class="line">    inner += &apos;&lt;li style=&quot;background:&apos;+colors[i%colors.length]+&apos;&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</div><div class="line">&#125;</div><div class="line">list.innerHTML = inner;</div></pre></td></tr></table></figure>
<h2 id="讲解剖析【复选框】"><a href="#讲解剖析【复选框】" class="headerlink" title="讲解剖析【复选框】"></a>讲解剖析【复选框】</h2><ul>
<li>复选框样式控制选中用==checked==。</li>
<li>改变事件用==onchange==;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var input = document.querySelectorAll(&apos;input&apos;);</div><div class="line">for(var i = 0; i &lt; input.length; i++)&#123;</div><div class="line">    input[i].onchange = function()&#123;</div><div class="line">	    console.log(this.checked);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（七 - 总结）]]></title>
      <url>/2017/10/25/javascript-7/</url>
      <content type="html"><![CDATA[<h3 id="1-获取元素的方法"><a href="#1-获取元素的方法" class="headerlink" title="1.获取元素的方法"></a>1.获取元素的方法</h3><ul>
<li>获取单个元素：<ul>
<li>document.getElementById(‘idName’);//只能从document获取</li>
<li>document.querySelector(‘cssSelector’);//可以从父级获取</li>
</ul>
</li>
<li>获取一组元素//都可以从父级获取<ul>
<li>document.querySelectorAll(‘cssSelector’);</li>
<li>document.getElementsByTagName(‘tagName’);</li>
<li>document.getElementsByClassName(‘className’);</li>
<li>query和get方法的区别：<ul>
<li>query方法只会在声明的时候，获取一次。</li>
<li>get方法每次使用的时候，都会获取一次。<a id="more"></a>
<h3 id="2-事件"><a href="#2-事件" class="headerlink" title="2.事件"></a>2.事件</h3></li>
</ul>
</li>
</ul>
</li>
<li>onload：加载完成之后（只有window、body能加onload事件）</li>
<li>onclick：点击事件</li>
<li>onmonuseover 鼠标移入</li>
<li>onmouseout 鼠标移除</li>
</ul>
<h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h3><ul>
<li>用来存储数据的一种方式（存值、存址）。</li>
<li>变量声明：var 变量名 = 要存储的具体数据</li>
<li>规则：在那个函数中声明的变量，就只能在这个函数中使用。</li>
</ul>
<h3 id="4-变量命名"><a href="#4-变量命名" class="headerlink" title="4.变量命名"></a>4.变量命名</h3><ol>
<li>可以使用字母、数字、$、_。</li>
<li>变量名不能以数字开头</li>
<li>驼峰命名：从第二个单词开始首字母大写</li>
<li>常量命名：字母全部大些，每个单词中间用“_”隔开</li>
<li>注意关键字和保留字不能用于变量名</li>
</ol>
<h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5.函数"></a>5.函数</h3><ul>
<li>匿名函数：没有名字的函数function(){};</li>
<li>有名字的函数：<br>  函数声明：function name(){ //执行语句 }</li>
<li>函数调用：<ul>
<li>事件调用：<ul>
<li>el.onclick = name;</li>
<li>el.onclick = function(){}</li>
</ul>
</li>
<li>直接调用<ul>
<li>name();</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-属性操作"><a href="#6-属性操作" class="headerlink" title="6.属性操作"></a>6.属性操作</h3><ul>
<li><p>属性的读操作</p>
<ul>
<li>属性读操作(获取属性值):obj.属性名</li>
<li>属性写操作(获取修改属性值):obj.属性名 = 属性值；</li>
<li><p>注意问题：</p>
<ul>
<li><p>1.clsss不叫class，叫className</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementById(&apos;div&apos;).className;</div></pre></td></tr></table></figure>
</li>
<li><p>2.style 操作的是元素的行间样式</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;border:#f00 1px solid;&quot;&gt;&lt;div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    document.getElementById(&apos;div&apos;).style;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>3.获取src的时候获取到的是绝对路径</p>
</li>
<li><p>4.获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式</p>
<ul>
<li>eg:只设置了一个background:color。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:blue&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    /*</div><div class="line">    *火狐得到的是:blue none repeat scroll 0% 0%;</div><div class="line">    *谷歌得到的是：blue</div><div class="line">    */</div><div class="line">     document.getElementById(&apos;div&apos;).style.background;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>5.设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色</p>
<ul>
<li>eg:background:#f60,得到的是rgb(255, 102, 0)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    /*</div><div class="line">    * 得到的是rgb(255, 102, 0)</div><div class="line">    */</div><div class="line">     document.getElementById(&apos;div&apos;).style.background;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>6.遇到“-”，删除“-”，首字母大写</p>
<ul>
<li>eg:background-color  =&gt; backgroundColor<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     document.getElementById(&apos;div&apos;).style.backgroundColor;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>7.把等号右侧的值赋给左侧</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sum = 100;</div></pre></td></tr></table></figure>
</li>
<li><p>8.cssText获取<strong>style</strong>中所有的内容</p>
<ul>
<li>直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     var div = document.getElementById(&apos;div&apos;);</div><div class="line">     //这个时候style=&quot;color:#f00;&quot;</div><div class="line">     div.cssText = &quot;color:#f00;&quot;</div><div class="line">     //这个时候style=&quot;background:#f60;color:#f00;&quot;</div><div class="line">     div.cssText +=&quot;color:#f00;&quot;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>9.cssText = “” 可以直接清空所有的行间样式。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     var div = document.getElementById(&apos;div&apos;);</div><div class="line">     //这个时候style被清空</div><div class="line">     div.cssText = &quot;&quot;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>10.innerHTML 代表元素中的所有内容</p>
<ul>
<li>从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素</li>
<li>直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=；<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     var div = document.getElementById(&apos;div&apos;);</div><div class="line"></div><div class="line">     //&lt;div id=&quot;div&quot;&gt;aaa&lt;/div&gt;</div><div class="line">     div.innerHTML = &quot;aaa&quot;</div><div class="line"></div><div class="line">     //&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;aaa&lt;/div&gt;</div><div class="line">     div.innerHTML += &quot;aaa&quot;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>11.在写left，width等样式时，一定注意加单位</p>
</li>
<li>可以给元素设置它本身不具备的属性，这个叫自定义属性。</li>
</ul>
</li>
<li>自定义属性：<ul>
<li>1.对象本身不具备的属性（不是标准中规定的属性，而是我们自己设置的）</li>
<li>2.索引中：在实践中，需要知道当前元素是一组元素中第几个的时候，需要使用索引值。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ul>
<li><p>扩展：</p>
<ul>
<li>字符串：引号包起来的一串自负</li>
<li>布尔值：true 和 false</li>
<li><p>运算符：</p>
<ul>
<li>1.“+”：</li>
</ul>
<ol>
<li>如果加号左右两边是数字，执行加法运算。</li>
<li>如果一遍是字符串，执行字符串链接。</li>
</ol>
<ul>
<li>2.执行数字运算：“*,/,-,%,–,-=,++,+=”</li>
<li>3.逻辑运算符，返回的结果是布尔值：&gt;,==,&lt;,&gt;=,&lt;=,!=;</li>
</ul>
</li>
<li>4.!非（否） 布尔值中取反</li>
</ul>
</li>
<li><p>语法:</p>
<blockquote>
<p>同一个位置，需要两种或两种以上的执行结果，用判断。</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   if(布尔值)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">if(布尔值) &#123;//布尔值为true执行if，为false接着向下执行</div><div class="line"></div><div class="line">&#125;else if(布尔值) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">if(布尔值) &#123;</div><div class="line"></div><div class="line">&#125; else if(布尔值) &#123;</div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="for循环："><a href="#for循环：" class="headerlink" title="for循环："></a>for循环：</h3><blockquote>
<p>当我们需要同时操作一组元素，或者一组数据的时候需要用到循环。</p>
<ol>
<li>初始值：var i = 0;</li>
<li>判断条件：i &lt; li.length;</li>
<li>执行语句：执行里面面的操作;</li>
<li>自增：i++;</li>
</ol>
</blockquote>
<pre><code>执行顺序：1，2，3，4

for(初始值;判断条件;自增){
    //执行语句
}
</code></pre><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><ul>
<li>用来存储一组数据</li>
<li>格式[data1,data2,data3]</li>
<li>每一个数据之间用，隔开</li>
<li>一组数据不能直接操作，要操作一位需要使用下标。</li>
<li>需要使用下标</li>
<li>可以从数组length获取到数组中存储多少位数据。</li>
</ul>
<h3 id="this："><a href="#this：" class="headerlink" title="this："></a>this：</h3><ol>
<li>事件函数中</li>
<li>this指向，触发当前事件的元素</li>
<li>目前的非事件函数，this指向window</li>
</ol>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol>
<li>定点清除<ul>
<li>1.先清楚选中的元素的样式。</li>
<li>2.给当前的元素加上选中样式。</li>
<li>3.定义个变量记录之前选中的元素和当前选中的元素。</li>
</ul>
</li>
<li>自定义属性</li>
<li>大清洗<ul>
<li>1.先清除所有元素的选中样式</li>
<li>2.给当前的加上选中样式</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（六 - 索引）]]></title>
      <url>/2017/10/25/javascript-6/</url>
      <content type="html"><![CDATA[<h2 id="获取方式区分："><a href="#获取方式区分：" class="headerlink" title="获取方式区分："></a>获取方式区分：</h2><ol>
<li>query相关的方法，再使用时就只获取一次。</li>
<li>get方法在每次我们调用的时候，都会重新获取一次。</li>
</ol>
<h2 id="onclick清空"><a href="#onclick清空" class="headerlink" title="onclick清空"></a>onclick清空</h2><p>box.onclick = null//把box的onclick事件变成空对象。<br><a id="more"></a></p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul>
<li><p>定义一个元素本来不存在的属性，自定义属性。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(var i = 0;i&lt;lis.length;i++)&#123;</div><div class="line">    //自定义属性可以是中文，可以是英文，可以是数字，但是尽量的要使用小写英文字母。</div><div class="line">    lis[i].序号 = i;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>特定的属性index（索引）。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for(var i = 0;i&lt;lis.length;i++)&#123;</div><div class="line">    lis[i].index = i;</div><div class="line">    lis[i].onclick = function()&#123;</div><div class="line">        alert(this.index);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> onclick </tag>
            
            <tag> 索引 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（简单讲解二）]]></title>
      <url>/2017/10/24/javascript-1/</url>
      <content type="html"><![CDATA[<h2 id="元素获取的其他方法"><a href="#元素获取的其他方法" class="headerlink" title="元素获取的其他方法"></a>元素获取的其他方法</h2><ul>
<li><strong>1.document.querySelector(‘Css Selector’);</strong><blockquote>
<p>接收一个css选择器（通配，群组，包含，id，类…等等</p>
</blockquote>
</li>
</ul>
<p>【注意：如果这个选择器对应的是一组元素，就只找到第0个。】</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var box = document.querySelector(&apos;.box&apos;);//第一个</div><div class="line">var box = document.querySelector(&apos;.box:last-of-type&apos;);//最后一个</div><div class="line">box.style.background = &quot;red&quot;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p><strong>2.父级.querySelectorAll(‘Css选择器’);</strong></p>
<ul>
<li>获取元素下某个类型的标签</li>
<li>获取结果是一种元素</li>
</ul>
<p>【注意：一组元素不能在js直接操作,需要添加下标】</p>
</li>
<li><p><strong>3.父级.getElementsByTagName(‘标签名’);</strong></p>
<ul>
<li>获取元素下某个类型的标签</li>
<li>获取结果是一种元素<ul>
<li><strong>4.document.getElementsClassName(‘Class名’);</strong></li>
</ul>
</li>
<li>获取元素下某个类型的标签</li>
<li>获取结果是一种元素</li>
</ul>
</li>
</ul>
<ul>
<li><strong>解：一组元素（元素集合，类数组）</strong><ul>
<li><ol>
<li>一组元素不能直接操作</li>
</ol>
</li>
<li><ol>
<li>一组元素哪怕只有一个，它也是一组元素。</li>
</ol>
</li>
<li><ol>
<li>一组元素在操作的时候，可以使用下标。</li>
</ol>
</li>
<li><ol>
<li>如果需要知道这组元素有几个，可以使用 length属性</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="if语法"><a href="#if语法" class="headerlink" title="if语法"></a>if语法</h2><blockquote>
<p>一种操作下会有两种或者以上的执行结果，记得用判断。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">if(条件)&#123;</div><div class="line">    条件成立的时候需要执行的代码</div><div class="line">&#125;</div><div class="line"></div><div class="line">if(条件)&#123;</div><div class="line">    条件成立的时候需要执行的代码</div><div class="line">&#125;else&#123;</div><div class="line">    条件不成立的时候需要执行代码</div><div class="line">&#125;</div><div class="line"></div><div class="line">if(条件一)&#123;</div><div class="line">    条件一成立的时候需要执行的代码</div><div class="line">&#125;else if(条件二)&#123;</div><div class="line">    条件二成立的时候需要执行的代码</div><div class="line">&#125;</div><div class="line">....else&#123;</div><div class="line">    以上条件都不成立的时候执行的代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 【style提取的是行间样式，所以不建议大家直接使用style里的内容当作判断条件】</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>逻辑运算符<ul>
<li>“==” 等于</li>
<li>“!=” 不等于</li>
<li>“&gt;=” 大于等于</li>
<li>“&lt;=” 小于等于</li>
<li>“&lt;” 小于</li>
<li>“&lt;” 大于</li>
</ul>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>为了能够更方便的描述和使用，程序通常会把要操作的数据，根据其特性，分成不同的类型进行操作。<br>在javascript中，数据一共可以分成如下七种类型：</p>
<ol>
<li><p>简单类型（值）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">1. Number</div><div class="line">	由0-9组成的值，还有几个比较特殊的值</div><div class="line">	a. NaN -&gt;Not a Number</div><div class="line">	b. Infinity-&gt; 无穷的</div><div class="line">2. String</div><div class="line">	由一对单引号或双引号包含的内容【单引号双引号需要成对】</div><div class="line">3. Booleans</div><div class="line">	用来描述逻辑的真假的，这种类型有且仅有两个值</div><div class="line">	a. true 表示真</div><div class="line">	b. false 表示假</div><div class="line">	【js严格比较大小写字母】</div><div class="line">	var a = true;</div><div class="line">	a = !a;//a = false;</div><div class="line">	var a = false;</div><div class="line">	a = !a;//a = true;</div><div class="line">4. Null</div><div class="line">	用来描述空值，这种类型有且仅有一个值【注意：当我们使用typeof的时候，返回的是‘object’】</div><div class="line">5. Undefined</div><div class="line">	用来描述不存在的值，这种类型有且仅有一个值</div><div class="line">6. Symbol</div><div class="line">7. function()&#123;&#125; function函数</div></pre></td></tr></table></figure>
</li>
<li><p>复杂类型（复合类型、引用类型）</p>
<ul>
<li>object：由7种数据类型组合的类型，object中包含7种类型中的任意类型。</li>
</ul>
</li>
</ol>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ol>
<li>var i = 0;</li>
<li>i &lt; li.length;</li>
<li>执行里面的操作;</li>
<li>i++;</li>
</ol>
<p><strong>易混解析：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">for(var i = 0; i &lt; li.length; i++)&#123;</div><div class="line">    //循环在页面加载完成之后就执行了</div><div class="line">    li[i].onclick = function()&#123;</div><div class="line">        /*</div><div class="line">         *点击li时执行</div><div class="line">         *这会循环肯定已经执行完了，</div><div class="line">         *所以在获取i的时候，是循环执行完之后的结果</div><div class="line">        */</div><div class="line">        alert(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote>
<p>在事件函数中this代表触发当前事件的元素</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for(var i = 0; i &lt; li.length; i++) &#123;</div><div class="line">    li[i].onclick = function()&#123;</div><div class="line">    	console.log(this,this.innerHTML);</div><div class="line">    	//结果是&lt;span&gt;1111&lt;/span&gt;  1111</div><div class="line">    	// 在事件函数中，this代表触发当前事件的元素</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 元素获取 </tag>
            
            <tag> if </tag>
            
            <tag> for </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（五 - for循环）]]></title>
      <url>/2017/10/17/javascript-5/</url>
      <content type="html"><![CDATA[<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul>
<li>什么时候使用for循环？<ul>
<li>当我们需要同时处理一组数据得时候，就需要使用循环</li>
</ul>
</li>
<li>需要什么？</li>
</ul>
<ol>
<li>起始值</li>
<li>判断条件</li>
<li>执行语句</li>
<li>自增<a id="more"></a>
</li>
</ol>
<ul>
<li><p>写法：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">for(var i = 0;i&lt;10;i++)&#123;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">var i = 0;//i是一个数字变量,循环变量</div><div class="line">for(i;i&lt;5;i++)&#123;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当变量的判断条件永远成立得时候，这个循环就会变成一个死循环。</p>
</li>
<li>循环变量在for循环结束之后一样调用，不过调用得值是for循环不符合条件之后得值。</li>
<li>当判断条件不成立时，循环就结束了。</li>
</ul>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul>
<li>在事件函数中this代表触发当前事件的元素。</li>
<li>在所有非事件函数中this指向window。</li>
<li>谁调用这个函数，this就指向谁。</li>
<li>函数执行的时候都属于window调用</li>
</ul>
<h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><ol>
<li><p>点击当前div，删除其他div的颜色，给当前点击元素换背景。</p>
<ul>
<li><p>1.全部清空法：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当我们在事件中需要知道当前事件的这个元素是一组中的第几个的时候，添加索引值。</div></pre></td></tr></table></figure>
</li>
<li><p>2.索引</p>
</li>
</ul>
</li>
<li>V字形生成思路 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1.获取外面的盒子</div><div class="line">2.点击事件</div><div class="line">3.生成五个div</div><div class="line">4.写变量l,t,w,h,</div><div class="line">5.判断他是先自增还是先自减</div><div class="line">6.设置dis值是正负</div><div class="line">7.判断拐点。</div><div class="line">9.inner+= 赋值</div><div class="line">10.innerHTML 赋值。</div><div class="line">11.设置top和left值。</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> for </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（四 - 运算符）]]></title>
      <url>/2017/10/17/javascript-4/</url>
      <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>“+”：可以用作连接符，因此当进行加减运算的时候要确保是两个数字类型。<ul>
<li>转换方法：可以用*，-，／任何一种运算符进行自动转换。</li>
</ul>
</li>
<li>“-”</li>
<li>“*”</li>
<li>“÷”<a id="more"></a>
</li>
</ul>
<h2 id="在js中动态添加元素样式的两种方式"><a href="#在js中动态添加元素样式的两种方式" class="headerlink" title="在js中动态添加元素样式的两种方式"></a>在js中动态添加元素样式的两种方式</h2><ol>
<li>行间样式。</li>
<li>给style标签添加innerHTML(但是有优先级的关系)</li>
</ol>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>解析：十行十列</p>
<ol>
<li>先循环十行</li>
<li>再循环十列</li>
<li><p>i循环执行一次，j循环执行十次。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   for(var i = 0; i &lt; 10; i++)&#123;</div><div class="line">	console.log(&apos;这是第&apos;+i+&apos;行&apos;);</div><div class="line">	// i循序执行一次 j循环会执行10次</div><div class="line">	for(var j = 0; j &lt; 10; j++) &#123;</div><div class="line">		console.log(&apos;这是第&apos;+j+&apos;列&apos;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 计算top值：当前是第n行，n<em>行高<br> 计算left值：当前是第n行，n</em>列高<br> 计算当前是第几个：行数*每行的个数得出这行之前有多少？</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> for </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（简单讲解三 - 数组）]]></title>
      <url>/2017/10/17/javascript-3/</url>
      <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>数组[] Array是一种数据格式。</li>
<li>数组中，每个数据之间用“,”隔开。</li>
<li>获取数组中的其中一位，需要用下标。</li>
<li>数组的长度 length。</li>
<li>数组中可以存放任意类型的数据,但是一般为了代码的可读性极维护性，我每一个数组中，只存放一种类型的数据。</li>
<li>当判断不大于这个数组的时候可以两种方式。<ul>
<li>i&gt;=arr.length-1;</li>
<li>i&gt;arr.length<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var = [123,&quot;abc&quot;,true,document,function()&#123;&#125;,,&quot;&quot;,[]];</div><div class="line">console.log(arr[5]); //undefined;</div><div class="line">console.log(arr.length);//8</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="练习和作业"><a href="#练习和作业" class="headerlink" title="练习和作业"></a>练习和作业</h2><p><strong>详细分析：</strong></p>
<ol>
<li>布局</li>
<li>获取元素，定义变量，定义数组</li>
<li>循环切换和顺序切换的按钮<ul>
<li>1.点击切换下面的文字说明。</li>
<li>2.点击加className,去掉另一个的className</li>
</ul>
</li>
<li>循环切换<ul>
<li>1.点击左边箭头控制数字一直减，到0的时候回到5.</li>
<li>2.点击右边尖头控制数字一直加，到最大的时候回到0.</li>
<li>3.上面的1/4修改值</li>
<li>4.切换文字描述<br>4.顺序切换</li>
<li>1.点击左边箭头控制数字一直减，到0的时候弹出提示，并且下面的不能点击.</li>
<li>2.点击右边尖头控制数字一直加，到最大的时候弹出提示，并且下面的不能点击.</li>
<li>3.上面的1/4修改值</li>
<li>4.切换文字描述<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        body&#123;</div><div class="line">            font-family: Arial;</div><div class="line">        &#125;</div><div class="line">        p&#123;</div><div class="line">            margin: 20px 0;</div><div class="line">            padding:0;</div><div class="line">        &#125;</div><div class="line">        input&#123;</div><div class="line">            outline: none;</div><div class="line">        &#125;</div><div class="line">        .wrap&#123;</div><div class="line">            position: relative;</div><div class="line">            width:550px;</div><div class="line">            margin:50px auto 0;</div><div class="line">        &#125;</div><div class="line">        .tab&#123;</div><div class="line">            width:550px;</div><div class="line">            margin:0 auto;</div><div class="line">            text-align: center;</div><div class="line">            background-color: #000;</div><div class="line">            padding:20px 0;</div><div class="line">        &#125;</div><div class="line">        .tab div&#123;</div><div class="line">            width:164px;</div><div class="line">            margin:0 auto;</div><div class="line">        &#125;</div><div class="line">        .tab div::after&#123;</div><div class="line">            content:&quot;.&quot;;</div><div class="line">            display:block;</div><div class="line">            height:0;</div><div class="line">            clear:both;</div><div class="line">        &#125;</div><div class="line">        .tab input&#123;</div><div class="line">            display: inline-block;</div><div class="line">            border-radius: 3px;</div><div class="line">            width: 80px;</div><div class="line">            line-height:20px;</div><div class="line">            margin-left:-1px;</div><div class="line">            border:#fff 1px solid;</div><div class="line">            background: #000;</div><div class="line">            color:#fff;</div><div class="line">            float: left;</div><div class="line">            cursor: pointer;</div><div class="line">        &#125;</div><div class="line">        .tab input.cur&#123;</div><div class="line">            background: #fff;</div><div class="line">            color:#000;</div><div class="line">        &#125;</div><div class="line">        .tab p&#123;</div><div class="line">            color:#ccc;</div><div class="line">            font-size: 13px;</div><div class="line">        &#125;</div><div class="line">        .box&#123;</div><div class="line">            margin: 0 auto;</div><div class="line">            width: 550px;</div><div class="line">            height: 310px;</div><div class="line">            position: relative;</div><div class="line">        &#125;</div><div class="line">        .box input&#123;</div><div class="line">            position: absolute;</div><div class="line">            top: 50%;</div><div class="line">            margin-top:-25px;</div><div class="line">            width: 40px;</div><div class="line">            height: 50px;</div><div class="line">            border: 0;</div><div class="line">            background: none;</div><div class="line">            color:#fff;</div><div class="line">            font-size: 26px;</div><div class="line">        &#125;</div><div class="line">        .box input:hover&#123;</div><div class="line">            background-color: rgba(0,0,0,.4);</div><div class="line">            cursor: pointer;</div><div class="line">        &#125;</div><div class="line">        .box input:nth-of-type(1)&#123;</div><div class="line">            left: 0;</div><div class="line">        &#125;</div><div class="line">        .box input:nth-of-type(2)&#123;</div><div class="line">            right:0;</div><div class="line">        &#125;</div><div class="line">        .box nav&#123;</div><div class="line">            position: absolute;</div><div class="line">            left:0;</div><div class="line">            bottom:0;</div><div class="line">            width:100%;</div><div class="line">            line-height:40px;</div><div class="line">            color: #fff;</div><div class="line">            text-align: center;</div><div class="line">            background-color: rgba(0,0,0,.3);</div><div class="line">        &#125;</div><div class="line">        .box span&#123;</div><div class="line">            position: absolute;</div><div class="line">            width:100%;</div><div class="line">            line-height:45px;</div><div class="line">            text-align: center;</div><div class="line">            top:0;</div><div class="line">            color: #fff;</div><div class="line">        &#125;</div><div class="line">        .mask&#123;</div><div class="line">            position: absolute;</div><div class="line">            display: none;</div><div class="line">            top:0;</div><div class="line">            left:0;</div><div class="line">            width:100%;</div><div class="line">            height:100%;</div><div class="line">            background-color: rgba(255,255,255,0);</div><div class="line">            z-index: 99;</div><div class="line">        &#125;</div><div class="line">        .fixed&#123;</div><div class="line">            width: 300px;</div><div class="line">            height:150px;</div><div class="line">            position: absolute;</div><div class="line">            left:50%;</div><div class="line">            margin-left: -150px;</div><div class="line">            top:50%;</div><div class="line">            margin-top: -75px;</div><div class="line">            background-color:rgba(0,0,0,.8);</div><div class="line">            color:#fff;</div><div class="line">            text-align: center;</div><div class="line">        &#125;</div><div class="line">        .fixed p:nth-of-type(2)&#123;</div><div class="line">            font-size: 12px;</div><div class="line">        &#125;</div><div class="line">        .fixed a&#123;</div><div class="line">            text-decoration: none;</div><div class="line">            color:#fff;</div><div class="line">            font-size: 12px;</div><div class="line">        &#125;</div><div class="line">        .fixed a:nth-of-type(1)&#123;</div><div class="line">            border:#fff 1px solid;</div><div class="line">            padding:5px 15px;</div><div class="line">        &#125;</div><div class="line">        .fixed a:nth-of-type(2)&#123;</div><div class="line">            position: absolute;</div><div class="line">            right:10px;</div><div class="line">            top:10px;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;wrap&quot;&gt;</div><div class="line">    &lt;div class=&quot;tab&quot;&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;input type=&quot;button&quot; value=&quot;循环切换&quot; class=&quot;cur&quot;&gt;</div><div class="line">            &lt;input type=&quot;button&quot; value=&quot;顺序切换&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;p&gt;图片可以从最后一张转到第一张循环&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;box&quot;&gt;</div><div class="line">        &lt;span&gt;1/4&lt;/span&gt;</div><div class="line">        &lt;input type=&quot;button&quot; value=&quot;&lt;&quot;&gt;</div><div class="line">        &lt;img src=&quot;img/1.jpg&quot; /&gt;</div><div class="line">        &lt;input type=&quot;button&quot; value=&quot;&gt;&quot;&gt;</div><div class="line">        &lt;nav&gt;文字描述一&lt;/nav&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;mask&quot;&gt;</div><div class="line">        &lt;div class=&quot;fixed&quot;&gt;</div><div class="line">            &lt;p&gt;Javascript 提醒&lt;/p&gt;</div><div class="line">            &lt;p&gt;已经到第一张啦～&lt;/p&gt;</div><div class="line">            &lt;a href=&quot;javascript:&quot;&gt;确定&lt;/a&gt;</div><div class="line">            &lt;a href=&quot;javascript:&quot;&gt;X&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">    //获取控制循环和顺序的元素</div><div class="line">    var tab = document.querySelector(&apos;.tab&apos;);</div><div class="line">    var tabP = tab.querySelector(&apos;p&apos;);</div><div class="line">    var tabs = tab.querySelectorAll(&apos;input&apos;);</div><div class="line"></div><div class="line">    //获取要进行修改处理的元素</div><div class="line">    var box = document.querySelector(&apos;.box&apos;);</div><div class="line">    var inputs = box.querySelectorAll(&apos;input&apos;);</div><div class="line">    var span = box.querySelector(&apos;span&apos;);</div><div class="line">    var img = box.querySelector(&apos;img&apos;);</div><div class="line">    var navText = box.querySelector(&apos;nav&apos;);</div><div class="line"></div><div class="line">    //弹出提示框</div><div class="line">    var mask  = document.querySelector(&apos;.mask&apos;);</div><div class="line">    var fixed = document.querySelector(&apos;.fixed&apos;);</div><div class="line">    var fText = fixed.querySelectorAll(&apos;p&apos;)[1];</div><div class="line">    var fSure = fixed.querySelectorAll(&apos;a&apos;);</div><div class="line"></div><div class="line">    //创建数组</div><div class="line">    var arrImg = [&apos;img/1.jpg&apos;,&apos;img/2.jpg&apos;,&apos;img/3.jpg&apos;,&apos;img/4.jpg&apos;];</div><div class="line">    var arrImgText = [&apos;文字描述一&apos;,&apos;文字描述二&apos;,&apos;文字描述三&apos;,&apos;文字描述四&apos;];</div><div class="line">    var arrText = [&apos;图片可以从最后一张转到第一张循环&apos;,&apos;图片只能到第一张或者最后一张&apos;];</div><div class="line"></div><div class="line">    var srcNum = 0,max = arrImg.length-1,min = 0,isIn = true;</div><div class="line"></div><div class="line">    tabs[0].onclick = function() &#123;</div><div class="line">        isIn = true;</div><div class="line">        toFunText();</div><div class="line">    &#125;</div><div class="line">    tabs[1].onclick = function() &#123;</div><div class="line">        isIn = false;</div><div class="line">        toFunText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //切换按钮的样式和文字变换</div><div class="line">    function toFunText()&#123;</div><div class="line">        if(isIn)&#123;</div><div class="line">            tabP.innerHTML = arrText[0];</div><div class="line">            tabs[0].className = &apos;cur&apos;;</div><div class="line">            tabs[1].className = &apos;&apos;;</div><div class="line">        &#125;else&#123;</div><div class="line">            tabP.innerHTML = arrText[1];</div><div class="line">            tabs[1].className = &apos;cur&apos;;</div><div class="line">            tabs[0].className = &apos;&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //上一张</div><div class="line">    inputs[0].onclick = function()&#123;</div><div class="line">        srcNum-- ;</div><div class="line">        if(srcNum&lt;min)&#123;</div><div class="line">            if(isIn)&#123;</div><div class="line">                srcNum = max;//循环</div><div class="line">            &#125;else&#123;</div><div class="line">                srcNum = min;</div><div class="line">                //alert(&apos;这是第一张&apos;);</div><div class="line">                fText.innerHTML = &apos;已经是第一张了哦～&apos;;</div><div class="line">                mask.style.display = &apos;block&apos;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        img.src = arrImg[srcNum];</div><div class="line">        navText.innerHTML = arrImgText[srcNum];</div><div class="line">        span.innerHTML =(srcNum+1)+&apos;/&apos;+arrImg.length;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    //下一张</div><div class="line">    inputs[1].onclick = function()&#123;</div><div class="line">        srcNum++ ;</div><div class="line">        if(srcNum&gt;max)&#123;</div><div class="line">            if(isIn)&#123;</div><div class="line">                srcNum = min;//循环</div><div class="line">            &#125;else&#123;</div><div class="line">                srcNum = max;</div><div class="line">                fText.innerHTML = &apos;已经是最后一张了哦～&apos;;</div><div class="line">                mask.style.display = &apos;block&apos;;</div><div class="line">                //alert(&apos;这是最后一张&apos;)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        img.src = arrImg[srcNum];</div><div class="line">        navText.innerHTML = arrImgText[srcNum];</div><div class="line">        span.innerHTML =(srcNum+1)+&apos;/&apos;+arrImg.length;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    //点击关闭提示弹框</div><div class="line">    fSure[0].onclick=function()&#123;</div><div class="line">        closeFun();</div><div class="line">    &#125;</div><div class="line">    fSure[1].onclick=function()&#123;</div><div class="line">        closeFun();</div><div class="line">    &#125;</div><div class="line">    function closeFun()&#123;</div><div class="line">        mask.style.display = &apos;none&apos;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript（简单讲解一）]]></title>
      <url>/2017/10/16/javascript-init/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>

<h2 id="javascript-JS-的组成？"><a href="#javascript-JS-的组成？" class="headerlink" title="javascript(JS)的组成？"></a>javascript(JS)的组成？</h2><ul>
<li>DOM 文档对象模型</li>
<li>BOM 浏览器对象模型（滚动条之类） [没有标准，也就意味着兼容性不好]</li>
<li>ECMAScript 核心(翻译器)<a id="more"></a>
<h2 id="javascript-JS-在页面中处理了什么事情？"><a href="#javascript-JS-在页面中处理了什么事情？" class="headerlink" title="javascript(JS)在页面中处理了什么事情？"></a>javascript(JS)在页面中处理了什么事情？</h2></li>
<li>特效交互</li>
<li>数据交互</li>
<li>逻辑操作</li>
</ul>
<h2 id="常见特效的原理"><a href="#常见特效的原理" class="headerlink" title="常见特效的原理"></a>常见特效的原理</h2><ul>
<li>通过js修改元素的css样式，来操作元素的变化。</li>
</ul>
<h2 id="js可以写在那里？"><a href="#js可以写在那里？" class="headerlink" title="js可以写在那里？"></a>js可以写在那里？</h2><p>注意：行为(js)，样式（css），结构（html）三者分离</p>
<ul>
<li><p>写在标签内部，行间事件【不建议这样写，不容易实现分离】</p>
<ul>
<li>在标签上通过一些特殊属性，比如onclick，onmouseover等来实现行为的，并且这个行为和当前元素进行了绑定。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--行内js 作用于标签上面--&gt;</div><div class="line">&lt;button onclick=&quot;alert(123)&quot;&gt;按钮&lt;/button&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>写在页面内部专门的script标签中，当浏览器读到script的时候就会解析代码。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;button id=&quot;but2&quot;&gt;按钮2&lt;/botton&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	document.getElementById(&quot;but2&quot;).onclick = function()&#123;</div><div class="line">		alert(&apos;就是这么绑定事件！&apos;);</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>写在外部调用，专门的js文件中【通过src引入】</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--外链JS--&gt;</div><div class="line">&lt;script src=&quot;js/1.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul>
<li>如果要获取的是个id，可以直接写元素的id名[存在浏览器兼容问题]</li>
<li><p>document.getElementById(“idName”); 获取Id</p>
<ul>
<li>【单、双引号都可以，但是要成对存在】</li>
<li>【翻译：在文档中 获取 元素 通过 ID】</li>
<li>【获取该元素之前，请确保元素已经被解析了】</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    document.getElementById(&quot;but&quot;).onclick = function()&#123;</div><div class="line">    	document.getElementById(&quot;div1&quot;).style.width  = &quot;200px&quot;;</div><div class="line">    	document.getElementById(&quot;div1&quot;).style.height = &quot;200px&quot;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><ul>
<li><p>属性的读操作(获取元素的属性值)</p>
<ul>
<li><p>clsss不叫class，叫className</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementById(&apos;div&apos;).className;</div></pre></td></tr></table></figure>
</li>
<li><p>style 操作的是元素的行间样式</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;border:#f00 1px solid;&quot;&gt;&lt;div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    document.getElementById(&apos;div&apos;).style;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>获取src的时候获取到的是绝对路径</p>
</li>
<li><p>获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式</p>
<ul>
<li>eg:只设置了一个background:color。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:blue&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    /*</div><div class="line">    *火狐得到的是:blue none repeat scroll 0% 0%;</div><div class="line">    *谷歌得到的是：blue</div><div class="line">    */</div><div class="line">     document.getElementById(&apos;div&apos;).style.background;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色</p>
<ul>
<li>eg:background:#f60,得到的是rgb(255, 102, 0)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    /*</div><div class="line">    * 得到的是rgb(255, 102, 0)</div><div class="line">    */</div><div class="line">     document.getElementById(&apos;div&apos;).style.background;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>遇到“-”，删除“-”，首字母大写</p>
<ul>
<li>eg:background-color  =&gt; backgroundColor<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     document.getElementById(&apos;div&apos;).style.backgroundColor;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>属性的写操作(修改元素的属性值)</p>
<p>  <strong>【注意： 在写left，width等样式时，一定注意加单位 】</strong></p>
<ul>
<li><p>把等号右侧的值赋给左侧</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sum = 100;</div></pre></td></tr></table></figure>
</li>
<li><p>cssText获取<strong>style</strong>中所有的内容</p>
<ul>
<li>直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     var div = document.getElementById(&apos;div&apos;);</div><div class="line">     //这个时候style=&quot;color:#f00;&quot;</div><div class="line">     div.cssText = &quot;color:#f00;&quot;</div><div class="line">     //这个时候style=&quot;background:#f60;color:#f00;&quot;</div><div class="line">     div.cssText +=&quot;color:#f00;&quot;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>cssText = “” 可以直接清空所有的行间样式。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     var div = document.getElementById(&apos;div&apos;);</div><div class="line">     //这个时候style被清空</div><div class="line">     div.cssText = &quot;&quot;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>innerHTML 代表元素中的所有内容</p>
<ul>
<li>从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素</li>
<li>直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=；<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">     var div = document.getElementById(&apos;div&apos;);</div><div class="line"></div><div class="line">     //&lt;div id=&quot;div&quot;&gt;aaa&lt;/div&gt;</div><div class="line">     div.innerHTML = &quot;aaa&quot;</div><div class="line"></div><div class="line">     //&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;aaa&lt;/div&gt;</div><div class="line">     div.innerHTML += &quot;aaa&quot;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li>一种数据格式，引号包起来的一串字符</li>
</ul>
<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><ul>
<li>一种数据类型，未定义</li>
</ul>
<h2 id="号运算符"><a href="#号运算符" class="headerlink" title="+号运算符"></a>+号运算符</h2><ul>
<li>加法运算</li>
<li>链接两个字符串</li>
<li>+=（a += b  — a = a + b）</li>
<li><p>加号有两个作用</p>
<ul>
<li>一个是加法运算</li>
<li><p>一个是字符串链接：只有加号左右两侧是数字的情况才会执行加法运算，如果有一侧是字符串就会执行字符串链接，结果也是字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = &quot;哈哈哈&quot;;</div><div class="line">var b = 1000;</div><div class="line">console.log(a+b);//哈哈哈1000</div><div class="line">console.log(b+a);//1000哈哈哈</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>变量就相当于给数据起了一个简短的名字</li>
<li>变量的作用：为了方便数据的复用和维护，我们通常用一个东西存放这类数据，我们就把它称为变量。</li>
<li>变量声明<ul>
<li>var 变量名 = 要存储的具体数据</li>
</ul>
</li>
<li>变量命名：<ul>
<li><ol>
<li>以字母开始</li>
</ol>
</li>
<li><ol>
<li>变量在命名时最好带有含义</li>
</ol>
</li>
<li><ol>
<li>注意不能使用关键字和保留字</li>
</ol>
</li>
<li><ol>
<li>驼峰方式命名</li>
</ol>
</li>
<li><ol>
<li>不能以数字、特殊符号（除了$,_）开头</li>
</ol>
</li>
<li><ol>
<li>后续内容不能包含特殊符号（除了$,_）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;button id=&quot;but&quot;&gt;按钮1&lt;/button&gt;</div><div class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	var but1 = document.getElementById(&apos;but&apos;);</div><div class="line">	var div1 = document.getElementById(&apos;div1&apos;);</div><div class="line">	btn1.onclick = function()&#123;</div><div class="line">		div1.style.width = &quot;200px&quot;;</div><div class="line">		div1.style.height = &quot;200px&quot;;</div><div class="line">		div1.innerHTML = &quot;您好！&quot;；</div><div class="line">	&#125;</div><div class="line">&lt;/scirpt&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li><p>有名字的函数<br>函数声明：<br>function name(){<br>  要执行的内容<br>}<br>调用:name();</p>
</li>
<li><p>匿名函数【不能直接使用，只能使用在事件中】</p>
<ul>
<li>eg:btn1.onclick = function{要执行的内容}</li>
</ul>
</li>
<li><p>函数调用：把函数执行一遍</p>
<ul>
<li>事件调用 btn.onclick = name;[注意不加括号]</li>
<li><p>非事件调用：添加括号</p>
<p>【*注意：btn.onclick = name(); 只会直接执行一次，当点击btn的时候就不执行了；】</p>
<p>【*注意：btn.onclick = function(){name()}; 不直接执行，当点击btn的时候执行；】</p>
</li>
</ul>
</li>
<li><p>什么时候加括号，什么时候不加括号？</p>
<ul>
<li>1.当浏览器直接读到这行代码的时候，就执行需要给函数调用加（）；</li>
<li>2.当某种特定的条件下才执行，不需要加（）；</li>
</ul>
</li>
</ul>
<h2 id="window和window-onload"><a href="#window和window-onload" class="headerlink" title="window和window.onload"></a>window和window.onload</h2><ul>
<li>onload事件 加载完成</li>
</ul>
<h2 id="onmouseover和onmouseout"><a href="#onmouseover和onmouseout" class="headerlink" title="onmouseover和onmouseout"></a>onmouseover和onmouseout</h2><blockquote>
<p>鼠标移入和移出</p>
</blockquote>
<h2 id="调试工具："><a href="#调试工具：" class="headerlink" title="调试工具："></a>调试工具：</h2><ul>
<li>alert()【弹出对话框，接受的是一个字符串】</li>
<li>console.log【打印控制台】</li>
</ul>
<ul>
<li>控制台</li>
<li>F12，或者右键-&gt;审查元素方式可以打开调试工具</li>
<li>选择：console</li>
<li>可以通过console进行数据输出，分析，代码调试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;button id=&quot;btn&quot;&gt;按钮1&lt;/button&gt;</div><div class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	var div1 = document.getElementById(&apos;div1&apos;);</div><div class="line">	var div1 = document.getElementById(&apos;div1&apos;);</div><div class="line">	btn1.onclick = function()&#123;</div><div class="line">		//把信息以日志方式打印到控制台中</div><div class="line">		console.log(&quot;你好&quot;);</div><div class="line">		//打印数据信息结构</div><div class="line">		console.dir(div1);</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 属性 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模块化]]></title>
      <url>/2017/08/09/20170809-%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h3 id="1-系统模块：http、querystring、url"><a href="#1-系统模块：http、querystring、url" class="headerlink" title="1.系统模块：http、querystring、url"></a>1.系统模块：http、querystring、url</h3><pre><code>- Crypto    加密
- Events    事件
- Net    网络操作
- OS    操作系统信息
- Path    处理文件路径
- Stream    流操作
- Timers    定时器
- ZLIB    压缩
</code></pre><a id="more"></a>
<h3 id="2-自定义模块"><a href="#2-自定义模块" class="headerlink" title="2.自定义模块"></a>2.自定义模块</h3><pre><code>- 引入自己的模块必须加./
- 对外输出东西——必须加给exports
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//一个个的</div><div class="line">exports.xxx=??;</div><div class="line">exports.xxx=??;</div><div class="line">exports.xxx=??;</div><div class="line">//module用来输出一个集合</div><div class="line">module.exports=&#123;</div><div class="line">    xxx:??,</div><div class="line">    xxx:??,</div><div class="line">    xxx:??</div><div class="line">&#125;;</div></pre></td></tr></table></figure>

- 使用
    - require——引入其他模块； require(./)； .js可以省略
        - 1.如果有&quot;./&quot;
            从当前目录找
        - 2.如果没有&quot;./&quot;
            先从系统模块,再从node_modules找
    - exports——输出
    - module——批量输出
</code></pre><h3 id="3-包管理器"><a href="#3-包管理器" class="headerlink" title="3.包管理器"></a>3.包管理器</h3><blockquote>
<p>npm：NodeJS Package Manager(NodeJS包管理器)</p>
</blockquote>
<ul>
<li>1.统一下载途径</li>
<li>2.自动下载依赖<ul>
<li>npm install xxx</li>
<li>npm uninstall xxx</li>
<li>node_modules——模块必须放在node_modules里面<ul>
<li>./</li>
<li>不加./</li>
</ul>
</li>
</ul>
</li>
<li>上传自己的模块<ul>
<li>npm init</li>
<li>npm publish</li>
<li>npm –force unpublish</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac 用 n 升级 node]]></title>
      <url>/2017/08/09/mac-node-up/</url>
      <content type="html"><![CDATA[<p>切记要按照步骤:</p>
<ul>
<li>第一步，先查看本机node.js版本：$ node -v<a id="more"></a></li>
<li>第二步，清除node.js的cache：$ sudo npm cache clean -f</li>
<li>第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 “n”: $ sudo npm install -g n</li>
<li>第四步，安装最新版本的node.js<ul>
<li>$ sudo n stable:(安装最新稳定版本)</li>
<li>$ sudo n latest:(安装最新版本)</li>
</ul>
</li>
<li>第五步，再次查看本机的node.js版本：$ node -v</li>
</ul>
<p>【注意：第二步比较重要，有些可以省略有些就不行，所以还是使用的好。】</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node 初识]]></title>
      <url>/2017/08/09/20170809-node1/</url>
      <content type="html"><![CDATA[<h2 id="http—协议"><a href="#http—协议" class="headerlink" title="http—协议"></a>http—协议</h2><ul>
<li>request    请求    输入-请求的信息</li>
<li>response    响应    输出-输出的东西<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">var server = http.createServer((req,res) =&gt; &#123;</div><div class="line">    switch (req.url)&#123;</div><div class="line">        case &apos;/1.html&apos;:</div><div class="line">            res.write(&apos;one.html&apos;);</div><div class="line">            break;</div><div class="line">        case &apos;/2.html&apos;:</div><div class="line">            res.write(&apos;two.html&apos;);</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            res.write(&apos;404&apos;);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.end();</div><div class="line">&#125;);</div><div class="line">server.listen(&apos;8080&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="模块-fs"><a href="#模块-fs" class="headerlink" title="模块 (fs)"></a>模块 (fs)</h2><ul>
<li>文件操作：fs—File System</li>
<li>异步 vs 同步<ul>
<li>异步——多个操作可以同时进行，前一次的操作没完事，后一次也能开始</li>
<li>同步——一次一个</li>
</ul>
</li>
<li><p>读取文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">readFile(文件名, function (err, data)&#123;&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>写入文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">writeFile(文件名, 内容, function (err)&#123;&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="请求方式："><a href="#请求方式：" class="headerlink" title="请求方式："></a>请求方式：</h2><ol>
<li>GET        数据在url中</li>
<li>POST        数据不在url中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">req.url=&gt;&quot;/aaa?user=blue&amp;pass=123456&quot;</div><div class="line">/aaa</div><div class="line">user=blue&amp;pass=123456</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><p>GET数据解析</p>
<ul>
<li><p>1.自己切</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">let server = http.createServer((req,res)=&gt;&#123;</div><div class="line">    let Get = &#123;&#125;;</div><div class="line">    var arr = req.url.split(&apos;?&apos;)[1];</div><div class="line"></div><div class="line">    var arr2 = arr.split(&apos;&amp;&apos;);</div><div class="line">    for(var i = 0;i&lt;arr2.length;i++)&#123;</div><div class="line">        var arr3 = arr2[i].split(&apos;=&apos;);</div><div class="line">        Get[arr3[0]] = arr3[1];</div><div class="line">    &#125;</div><div class="line">    console.log(Get);</div><div class="line">&#125;).listen(&apos;8080&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>2.querystring：xxx=xx&amp;xxx=xxx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">const queryString = require(&apos;querystring&apos;);</div><div class="line">let server = http.createServer((req,res)=&gt;&#123;</div><div class="line">    var GET = &#123;&#125;</div><div class="line">    if(req.url.indexOf(&apos;?&apos;)!=-1)&#123;</div><div class="line">        var arr = req.url.split(&apos;?&apos;);</div><div class="line">        var url = arr[0];</div><div class="line">         GET=queryString.parse(arr[1]);</div><div class="line">    &#125;else&#123;</div><div class="line">        var url = req.url;</div><div class="line">    &#125;</div><div class="line">    console.log(url,GET);</div><div class="line">&#125;).listen(&apos;8080&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>3.urlLib：aaa?xxx=xx&amp;xx=12</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">const urlReq = require(&apos;url&apos;);</div><div class="line">let server = http.createServer((req,res)=&gt;&#123;</div><div class="line">    var obj = urlReq.parse(req.url,true);</div><div class="line">    var url = obj.pathname;</div><div class="line">    var GET = obj.query;</div><div class="line"></div><div class="line">    console.log(url,GET);</div><div class="line">&#125;).listen(&apos;8080&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>POST数据</p>
</li>
<li>数据接收<ul>
<li>req.on(‘data’,function(){});</li>
<li>req.on(‘end’,function(){});<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">http.createServer((req,res)=&gt;&#123;</div><div class="line">    var str = &apos;&apos;;</div><div class="line">    req.on(&apos;data&apos;,function(data)&#123;</div><div class="line">        str += data;</div><div class="line">    &#125;);</div><div class="line">    req.on(&apos;end&apos;,function()&#123;</div><div class="line">        console.log(str);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;).listen(8080);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ul>
<li>post</li>
<li>get<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">function json2url(json)&#123;</div><div class="line">    var arr=[];</div><div class="line">    for(var name in json)&#123;</div><div class="line">        arr.push(name+&apos;=&apos;+json[name]);</div><div class="line">    &#125;</div><div class="line">    return arr.join(&apos;&amp;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function ajax(json)&#123;</div><div class="line">    json=json || &#123;&#125;;</div><div class="line">    if(!json.url)return;</div><div class="line">    json.data=json.data || &#123;&#125;;</div><div class="line">    json.type=json.type || &apos;get&apos;;</div><div class="line"></div><div class="line">    var timer=null;</div><div class="line">    //低版本的IE浏览器不支持ActiveXObject(&apos;Microsoft.XMLHTTP&apos;)</div><div class="line">    if(window.XMLHttpRequest)&#123;</div><div class="line">        var oAjax=new XMLHttpRequest();</div><div class="line">    &#125;else&#123;</div><div class="line">        var oAjax=new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //配置请求参数</div><div class="line">    switch(json.type)&#123;</div><div class="line">        case &apos;get&apos;:</div><div class="line">            oAjax.open(&apos;GET&apos;,json.url+&apos;?&apos;+json2url(json.data),true);</div><div class="line">            //3.发送请求</div><div class="line">            oAjax.send();</div><div class="line">            break;</div><div class="line">        case &apos;post&apos;:</div><div class="line">            oAjax.open(&apos;POST&apos;,json.url,true);</div><div class="line">            oAjax.setRequestHeader(&apos;Content-Type&apos;,&apos;application/x-www-form-urlencoded&apos;);</div><div class="line">            oAjax.send(json2url(json.data));</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 4. 监听返回</div><div class="line">    *   onload属性是标准的XMLHttpRequest才有的事件</div><div class="line">    *   低版本浏览器不支持</div><div class="line">    *   低版本浏览器支持的事件</div><div class="line">    *       onreadystatechange</div><div class="line">    *       属性：readyState</div><div class="line">    *           ajax的工作状态</div><div class="line">    *           0：初始化</div><div class="line">    *           1：调用send方法后（请求发出以后）</div><div class="line">    *           2：请求已经被接收处理</div><div class="line">    *           3：客户端接收到响应，但是内容还不一定完成了解析</div><div class="line">    *           4：解析完成</div><div class="line">    * */</div><div class="line">    oAjax.onreadystatechange=function()&#123;</div><div class="line">        if(oAjax.readyState==4)&#123;</div><div class="line">            clearTimeout(timer);</div><div class="line">            if(oAjax.status&gt;=200 &amp;&amp; oAjax.status&lt;300 || oAjax.status==304)&#123;</div><div class="line">                json.success &amp;&amp; json.success(oAjax.responseText);</div><div class="line">            &#125;else&#123;</div><div class="line">                json.error &amp;&amp; json.error(oAjax.status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nvm常用命令]]></title>
      <url>/2017/08/01/20170801-nvm-node/</url>
      <content type="html"><![CDATA[<h2 id="nvm常用命令："><a href="#nvm常用命令：" class="headerlink" title="nvm常用命令："></a>nvm常用命令：</h2><ul>
<li>nvm install <version>  ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</version></li>
<li>nvm uninstall <version>  ## 删除已安装的指定版本，语法与install类似<a id="more"></a></version></li>
<li>nvm use <version>  ## 切换使用指定的版本node</version></li>
<li>nvm ls  ## 列出所有安装的版本</li>
<li>nvm ls-remote  ## 列出所以远程服务器的版本（官方node version list）</li>
<li>nvm current  ## 显示当前的版本</li>
<li>nvm alias <name> <version>  ## 给不同的版本号添加别名</version></name></li>
<li>nvm unalias <name>  ## 删除已定义的别名</name></li>
<li>nvm reinstall-packages <version>  ## 在当前版本node环境下，重新全局安装指定版本号的npm包</version></li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> nvm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nvm </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6（字符串的扩展）]]></title>
      <url>/2017/07/31/es6-string-extension/</url>
      <content type="html"><![CDATA[<h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><ul>
<li>es6新增的用于表示字符串的语法格式</li>
<li>以``作为模板字符串的起始和结束符</li>
<li>是一个增强的字符串标识符<a id="more"></a>
<ul>
<li>保持编辑格式</li>
<li>支持表达式<ul>
<li>${表达式}</li>
<li>我们可以把一个js的表达式放置在一个${}中，这里的表达式会被js所解析，注意：不支持语句，比如if，for，while等<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var str = &apos;muban&apos;;</div><div class="line">var str1 = `muban`;</div><div class="line">var str2 = `$&#123;1+2&#125;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;$&#123;&apos;muban&apos;.toUpperCase()&#125;&lt;/li&gt;</div><div class="line">    &lt;li&gt;$&#123;str1&#125;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;`</div><div class="line">console.log(str2);</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> string </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6（函数扩展）]]></title>
      <url>/2017/07/31/es6-function-extension/</url>
      <content type="html"><![CDATA[<h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><ul>
<li>函数参数的默认值：为函数形参设置默认值</li>
<li>语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//有默认值的参数写在后面</div><div class="line">function fn(a,b=1)&#123;&#125;</div><div class="line">function fn(&#123;a,b=1&#125;)&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>注意：定义默认值的参数必须是尾参数，因为定义默认值之后该参数可忽略。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function fn(a,b)&#123;</div><div class="line">	return &#123;a,b&#125;;</div><div class="line">&#125;</div><div class="line">console.log(fn(1,2));//a =1;b=2;</div><div class="line">console.log(fn(1));//a=1;b=undefined;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><ul>
<li>rest参数：用于获取函数的多余参数<ul>
<li>我们通常会一个函数定义一些参数，有些参数是确定的，而有些参数是不确定（个数）的</li>
<li>es6之前如果要获取不定参数，一般用anguments不定参来处理</li>
<li>这里用剩余参数来处理</li>
</ul>
</li>
<li>语法：function fn(a,b=1,….变量名){}</li>
<li>注意：rest 后边不能再有其他参数，否则会报错。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function fn(a,b,c,....tutu)&#123;</div><div class="line">	console.log(tutu);//用于获取函数的多余参数  tutu是个数组</div><div class="line">&#125;</div><div class="line">fn(1,2,3,4,5,6,7)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="箭头函数：【属于表达式函数】"><a href="#箭头函数：【属于表达式函数】" class="headerlink" title="箭头函数：【属于表达式函数】"></a>箭头函数：【属于表达式函数】</h2><blockquote>
<p>用来作为回调函数使用。</p>
</blockquote>
<ul>
<li><p>写法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//当参数只有一个的时候 小括号可以省略</div><div class="line">var f = a=&gt;a+1;</div><div class="line">//当参数有多个的时候,要加小括号</div><div class="line">var f = (a,b) =&gt;a+b;</div><div class="line">//当没有参数时候,也要加小括号</div><div class="line">var f = () =&gt;a+b;</div><div class="line"></div><div class="line">//只有一条语句的时候，可以省略&#123;&#125;，同时该条语句的返回值</div><div class="line">var fn7 = r =&gt;r * r * Math.PI;</div><div class="line"></div><div class="line">//但是如果有多条语句或者返回值是一个对象，则必须使用&#123;&#125;</div><div class="line">var fn8 = () =&gt;&#123;</div><div class="line">    var result = r * r * Math.PI;</div><div class="line">    console.log(result);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var fn9 = () =&gt;&#123;</div><div class="line">    return &#123;</div><div class="line">        x:10</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注意</p>
<ul>
<li>1、箭头函数的this永远指向 声明时候 作用域的对象<ul>
<li>普通函数this指向取决于调用</li>
<li>箭头函数this指向取决于声明</li>
</ul>
</li>
<li>2、不可以当作构造函数，不可以使用new命令，否则会抛出一个错误。</li>
<li>3、该函数体内不存在arguments。</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 参数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6（数组扩展）]]></title>
      <url>/2017/07/28/es6-array-extension/</url>
      <content type="html"><![CDATA[<h2 id="扩展运算符（spread）"><a href="#扩展运算符（spread）" class="headerlink" title="扩展运算符（spread）"></a>扩展运算符（spread）</h2><ul>
<li>扩展运算符（spread）是三个点（…）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。该运算符主要用于函数调用。<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5,6,7];</div><div class="line">console.log(Math.max(...arr));//7 返回最大值</div><div class="line"></div><div class="line">var arr1 = [1,3,4];</div><div class="line">var arr2 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class="line">//var arr3 = arr1.concat(arr2);</div><div class="line">var arr3 = [...arr1,...arr2] // 1,3,4,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="数组推导"><a href="#数组推导" class="headerlink" title="数组推导"></a>数组推导</h2><ul>
<li>ES6提供简洁写法，允许直接通过现有数组生成新数组，这被称为数组推导（array comprehension）。</li>
<li>eg:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5];</div><div class="line">var arr2 = [for(value of arr) value*2];</div><div class="line">console.log(arr2);//2,4,6,8,10</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6（for of）]]></title>
      <url>/2017/07/28/es6-for-of/</url>
      <content type="html"><![CDATA[<blockquote>
<p>ES6 借鉴 C++、Java、C# 和 Python 语言，引入了for…of循环，作为遍历所有数据结构的统一的方法。</p>
</blockquote>
<ul>
<li>一个数据结构只要部署了<strong>Symbol.iterator</strong>属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。也就是说，for…of循环内部调用的是数据结构的Symbol.iterator方法。</li>
<li>for…of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。<a id="more"></a></li>
<li>arr.keys():用于for of对数组键名的遍历<ul>
<li>语法：for(let index of arr.keys()){}</li>
</ul>
</li>
<li>arr.values():用于for of 对数组键值的遍历<ul>
<li>语法：for(let value of arr.values()){}</li>
</ul>
</li>
<li>arr.entries():用于for of 对数组键值对的遍历<ul>
<li>语法：for(let[index,ele]of arr.entries()){}</li>
</ul>
</li>
</ul>
<h3 id="回顾："><a href="#回顾：" class="headerlink" title="回顾："></a>回顾：</h3><ul>
<li>for in 用来遍历对象的属性名。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class="line">for (var v in arr) &#123;</div><div class="line">    console.log(v);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数组类似数组的对象，Set，Map"><a href="#数组类似数组的对象，Set，Map" class="headerlink" title="数组类似数组的对象，Set，Map"></a>数组类似数组的对象，Set，Map</h3><ul>
<li><strong>数组</strong>原生具备iterator接口（即默认部署了Symbol.iterator属性），for…of循环本质上就是调用这个接口产生的遍历器。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class="line">for (var v of arr) &#123;</div><div class="line">    console.log(v);  //a,b,c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h3><ul>
<li>像var a = {‘a’,’b’}这种普通的对象，for…of结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用，那就要自己设置迭代器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// 当我们通过forof去迭代obj的时候，js内部会去查找并调用obj的Symbol.iterator的方法</div><div class="line">//obj[Symbol.iterator]() =&gt; iterator.next() =&gt; 根据返回的对象中的done值，来决定是否已经完成或继续调用next，如果done为真，表示迭代结束通过忽略这次value值，如果为false，表示当前value有效，并继续下一次迭代（next()）</div><div class="line">for (var v of obj) &#123;</div><div class="line">    console.log(v);</div><div class="line">&#125;</div><div class="line">for (var &#123;k,v&#125; of obj) &#123;</div><div class="line">  console.log(k,v);</div><div class="line">&#125;</div><div class="line"></div><div class="line">例如：自己写迭代器</div><div class="line">//如果我们希望一个对象能够被迭代，那么就需要去实现该对象的迭代协议和迭代器</div><div class="line">// 迭代协议</div><div class="line"></div><div class="line">var obj = &#123;x:10,y:20,z:100&#125;</div><div class="line">obj[Symbol.iterator] = function() &#123;</div><div class="line">    //let keys = [&apos;x&apos;, &apos;y&apos;];</div><div class="line">    let keys = Object.keys(obj);</div><div class="line">    let n = -1;</div><div class="line">    return &#123;</div><div class="line">        next() &#123;</div><div class="line">            if (n &lt; keys.length-1) &#123;</div><div class="line">                //return &#123;done: false, value: obj[keys[n++]]&#125;;</div><div class="line">                //return &#123;done: false, value: keys[n++]&#125;;</div><div class="line">                n++;</div><div class="line">                return &#123;done: false, value: &#123;</div><div class="line">                    k: keys[n],</div><div class="line">                    v: obj[keys[n]]</div><div class="line">                &#125;&#125;;</div><div class="line">            &#125; else &#123;</div><div class="line">                return &#123;done: true&#125;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">var objIterator = obj[Symbol.iterator]();</div><div class="line">//console.log(objIterator);</div><div class="line">console.log(objIterator.next());</div><div class="line">console.log(objIterator.next());</div><div class="line">console.log(objIterator.next());</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> for of </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6（变量、常量、解构赋值）]]></title>
      <url>/2017/07/27/es6-let-const-Destructuring-assignment/</url>
      <content type="html"><![CDATA[<h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><p><strong>let</strong>：用来声明变量。<br><a id="more"></a><br>【特性】：</p>
<ol>
<li>不允许重复声明</li>
<li>没有预解析，必须在声明之后使用【我们把当前作用域最开始到let声明的变量之间的区域称为-暂存死区】</li>
<li>块级作用域<ul>
<li>一对{}包括的区域称为代码块：块级作用域指一个变量或者函数只在该区域才起作用。</li>
</ul>
</li>
</ol>
<h2 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h2><h3 id="什么是常量？"><a href="#什么是常量？" class="headerlink" title="什么是常量？"></a>什么是常量？</h3><p>在定义之后值是固定不变的，即为常量。</p>
<h3 id="const作用"><a href="#const作用" class="headerlink" title="const作用"></a>const作用</h3><p>用来声明常量，注意：重复声明会报错。</p>
<h3 id="变量和常量的区别："><a href="#变量和常量的区别：" class="headerlink" title="变量和常量的区别："></a>变量和常量的区别：</h3><p>变量在定值之后可以修改值，常量不可以，但是常量的对象的值是可以修改的。</p>
<ul>
<li>常量不可以改，它的子数据可以修改</li>
<li>如果希望一个对象本身及其子数据都不能变化，那么通过const和freeze同时使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">eg：</div><div class="line">    const a = &#123;x:0&#125;;</div><div class="line">    a = 12; //错误</div><div class="line">    a.x = 10; // 可以修改成功</div><div class="line"></div><div class="line">    //如果不允许修改，那么就可以用冻结对象的方式</div><div class="line">    Object.freeze(obj);</div><div class="line">    a.x = 120;</div><div class="line">    console.log(a); // 改不了，因为已经冻结了</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="解构赋值："><a href="#解构赋值：" class="headerlink" title="解构赋值："></a>解构赋值：</h2><blockquote>
<p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为结构。</p>
</blockquote>
<h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><blockquote>
<p>按照对应的顺序解构</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3]</div><div class="line">var [a,b,c] = arr;</div><div class="line">console.log(a,b,c); //答案：1 2 3</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1,[2,3]];</div><div class="line">var [a,b,c] = arr;</div><div class="line">console.log(a,b,c); //1 [2,3] undefind</div></pre></td></tr></table></figure>
<h3 id="对象的解构赋值："><a href="#对象的解构赋值：" class="headerlink" title="对象的解构赋值："></a>对象的解构赋值：</h3><blockquote>
<p>根据名称来找的</p>
</blockquote>
<ul>
<li>1.声明{}中的变量</li>
<li>2.根据{}中的变量，去=后面的对象中提取对应的属性，并把该属性对应的值赋值给前面对应的变量，如果没有该属性，返回undefined</li>
<li>3.如果我们希望解构出来的属性名在使用的时候使用的是另一个名称，那么这个时候需要给需要使用的变量名设置一个别名<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//取出left别名L，去除top别名T</div><div class="line">let &#123;left:L,top:T,a&#125;=getComputedStyle(document.body);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">	foo:function()&#123;</div><div class="line">	&#125;,</div><div class="line">	o:&#123;&#125;,</div><div class="line">	arr:[],</div><div class="line">	str:&apos;abc&apos;</div><div class="line">&#125;</div><div class="line">var &#123;foo,arr,str&#125; = obj;</div><div class="line">console.log(foo,arr,str);//function()&#123;&#125; [] abc object</div></pre></td></tr></table></figure>
<h3 id="交换值："><a href="#交换值：" class="headerlink" title="交换值："></a>交换值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var x = 1;</div><div class="line">var y = 2;</div><div class="line">var [x,y] = [y,x];</div><div class="line">console.log(x,y);//2 1;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
            <tag> 解构赋值 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6（对象的扩展）]]></title>
      <url>/2017/07/27/es6-object-extension/</url>
      <content type="html"><![CDATA[<h2 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法:"></a>属性的简洁表示法:</h2><blockquote>
<p>当一个对象的key和对应的值（必须是一个变量名称）同名的话，那么可以简写成一个key</p>
</blockquote>
<ul>
<li>允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。<br>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function f(x,y)&#123;</div><div class="line">	x++;</div><div class="line">	y++;</div><div class="line">	return &#123;x,y&#125;</div><div class="line">&#125;</div><div class="line">console.log(f(1,2));//&#123;x:2,y:3&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="方法的简洁表示法：例如："><a href="#方法的简洁表示法：例如：" class="headerlink" title="方法的简洁表示法：例如："></a>方法的简洁表示法：例如：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">普通：</div><div class="line">let obj2 = &#123;</div><div class="line">    a:a,</div><div class="line">    fn:function()&#123;</div><div class="line">        console.log(1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">es6:</div><div class="line">let obj3 = &#123;</div><div class="line">    a,</div><div class="line">    fn()&#123;</div><div class="line">        console.log(1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x = &apos;username&apos;;</div><div class="line">let obj4 = &#123;</div><div class="line">    //x: &apos;motao&apos;  //这里的x不会作为变量表达式进行解析</div><div class="line">    [x]: &apos;motao&apos;    //如果把key放在一个[]中，那么[]中的内容将被作为表达式进行解析</div><div class="line">&#125;</div><div class="line">console.log(obj4);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> web前端 </category>
            
            <category> ES6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6简洁表示法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 命令]]></title>
      <url>/2017/07/24/github-pages-Hexo/</url>
      <content type="html"><![CDATA[<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><ul>
<li>hexo clean</li>
<li>hexo generate</li>
<li>hexo deploy</li>
</ul>
<h3 id="些常用命令："><a href="#些常用命令：" class="headerlink" title="些常用命令："></a>些常用命令：</h3><ul>
<li>hexo new”postName” #新建文章</li>
<li>hexo new page”pageName” #新建页面</li>
<li>hexo generate #生成静态页面至public目录</li>
<li>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li>
<li>hexo deploy #将.deploy目录部署到GitHub</li>
<li>hexo help # 查看帮助</li>
<li>hexo version #查看Hexo的版本</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
