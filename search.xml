<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript（简单讲解一）]]></title>
    <url>%2F2017%2F07%2F24%2Fgithub-pages-Hexo%2F</url>
    <content type="text"><![CDATA[优秀的人，不是不合群，而是他们合群的人里面没有你 javascript(JS)的组成？ DOM 文档对象模型 BOM 浏览器对象模型（滚动条之类） [没有标准，也就意味着兼容性不好] ECMAScript 核心(翻译器) javascript(JS)在页面中处理了什么事情？ 特效交互 数据交互 逻辑操作 常见特效的原理 通过js修改元素的css样式，来操作元素的变化。 js可以写在那里？注意：行为(js)，样式（css），结构（html）三者分离 写在标签内部，行间事件【不建议这样写，不容易实现分离】 在标签上通过一些特殊属性，比如onclick，onmouseover等来实现行为的，并且这个行为和当前元素进行了绑定。 12&lt;!--行内js 作用于标签上面--&gt;&lt;button onclick=&quot;alert(123)&quot;&gt;按钮&lt;/button&gt; 写在页面内部专门的script标签中，当浏览器读到script的时候就会解析代码。 123456&lt;button id=&quot;but2&quot;&gt;按钮2&lt;/botton&gt;&lt;script&gt; document.getElementById(&quot;but2&quot;).onclick = function()&#123; alert(&apos;就是这么绑定事件！&apos;); &#125;&lt;/script&gt; 写在外部调用，专门的js文件中【通过src引入】 12&lt;!--外链JS--&gt;&lt;script src=&quot;js/1.js&quot;&gt;&lt;/script&gt; 获取元素 如果要获取的是个id，可以直接写元素的id名[存在浏览器兼容问题] document.getElementById(“idName”); 获取Id 【单、双引号都可以，但是要成对存在】 【翻译：在文档中 获取 元素 通过 ID】 【获取该元素之前，请确保元素已经被解析了】 123456&lt;script&gt; document.getElementById(&quot;but&quot;).onclick = function()&#123; document.getElementById(&quot;div1&quot;).style.width = &quot;200px&quot;; document.getElementById(&quot;div1&quot;).style.height = &quot;200px&quot;; &#125;&lt;/script&gt; 属性操作 属性的读操作(获取元素的属性值) clsss不叫class，叫className 1document.getElementById(&apos;div&apos;).className; style 操作的是元素的行间样式 1234&lt;div id=&quot;div&quot; style=&quot;border:#f00 1px solid;&quot;&gt;&lt;div&gt;&lt;script&gt; document.getElementById(&apos;div&apos;).style;&lt;/script&gt; 获取src的时候获取到的是绝对路径 获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式 eg:只设置了一个background:color。12345678&lt;div id=&quot;div&quot; style=&quot;background:blue&quot;&gt;&lt;/div&gt;&lt;script&gt; /* *火狐得到的是:blue none repeat scroll 0% 0%; *谷歌得到的是：blue */ document.getElementById(&apos;div&apos;).style.background;&lt;/script&gt; 设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色 eg:background:#f60,得到的是rgb(255, 102, 0)1234567&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;&lt;script&gt; /* * 得到的是rgb(255, 102, 0) */ document.getElementById(&apos;div&apos;).style.background;&lt;/script&gt; 遇到“-”，删除“-”，首字母大写 eg:background-color =&gt; backgroundColor1234&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;&lt;script&gt; document.getElementById(&apos;div&apos;).style.backgroundColor;&lt;/script&gt; 属性的写操作(修改元素的属性值) 【注意： 在写left，width等样式时，一定注意加单位 】 把等号右侧的值赋给左侧 1var sum = 100; cssText获取style中所有的内容 直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；12345678&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;&lt;script&gt; var div = document.getElementById(&apos;div&apos;); //这个时候style=&quot;color:#f00;&quot; div.cssText = &quot;color:#f00;&quot; //这个时候style=&quot;background:#f60;color:#f00;&quot; div.cssText +=&quot;color:#f00;&quot;&lt;/script&gt; cssText = “” 可以直接清空所有的行间样式。 123456&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;&lt;script&gt; var div = document.getElementById(&apos;div&apos;); //这个时候style被清空 div.cssText = &quot;&quot;&lt;/script&gt; innerHTML 代表元素中的所有内容 从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素 直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=；12345678910&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;&lt;/div&gt;&lt;script&gt; var div = document.getElementById(&apos;div&apos;); //&lt;div id=&quot;div&quot;&gt;aaa&lt;/div&gt; div.innerHTML = &quot;aaa&quot; //&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;aaa&lt;/div&gt; div.innerHTML += &quot;aaa&quot;&lt;/script&gt; 字符串 一种数据格式，引号包起来的一串字符 undefined 一种数据类型，未定义 +号运算符 加法运算 链接两个字符串 +=（a += b — a = a + b） 加号有两个作用 一个是加法运算 一个是字符串链接：只有加号左右两侧是数字的情况才会执行加法运算，如果有一侧是字符串就会执行字符串链接，结果也是字符串。 1234var a = &quot;哈哈哈&quot;;var b = 1000;console.log(a+b);//哈哈哈1000console.log(b+a);//1000哈哈哈 变量 变量就相当于给数据起了一个简短的名字 变量的作用：为了方便数据的复用和维护，我们通常用一个东西存放这类数据，我们就把它称为变量。 变量声明 var 变量名 = 要存储的具体数据 变量命名： 以字母开始 变量在命名时最好带有含义 注意不能使用关键字和保留字 驼峰方式命名 不能以数字、特殊符号（除了$,_）开头 后续内容不能包含特殊符号（除了$,_）1234567891011&lt;button id=&quot;but&quot;&gt;按钮1&lt;/button&gt;&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;&lt;script&gt; var but1 = document.getElementById(&apos;but&apos;); var div1 = document.getElementById(&apos;div1&apos;); btn1.onclick = function()&#123; div1.style.width = &quot;200px&quot;; div1.style.height = &quot;200px&quot;; div1.innerHTML = &quot;您好！&quot;； &#125;&lt;/scirpt&gt; 函数 有名字的函数函数声明：function name(){ 要执行的内容}调用:name(); 匿名函数【不能直接使用，只能使用在事件中】 eg:btn1.onclick = function{要执行的内容} 函数调用：把函数执行一遍 事件调用 btn.onclick = name;[注意不加括号] 非事件调用：添加括号 【*注意：btn.onclick = name(); 只会直接执行一次，当点击btn的时候就不执行了；】 【*注意：btn.onclick = function(){name()}; 不直接执行，当点击btn的时候执行；】 什么时候加括号，什么时候不加括号？ 1.当浏览器直接读到这行代码的时候，就执行需要给函数调用加（）； 2.当某种特定的条件下才执行，不需要加（）； window和window.onload onload事件 加载完成 onmouseover和onmouseout 鼠标移入和移出 调试工具： alert()【弹出对话框，接受的是一个字符串】 console.log【打印控制台】 控制台 F12，或者右键-&gt;审查元素方式可以打开调试工具 选择：console 可以通过console进行数据输出，分析，代码调试 123456789101112&lt;button id=&quot;btn&quot;&gt;按钮1&lt;/button&gt;&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;&lt;script&gt; var div1 = document.getElementById(&apos;div1&apos;); var div1 = document.getElementById(&apos;div1&apos;); btn1.onclick = function()&#123; //把信息以日志方式打印到控制台中 console.log(&quot;你好&quot;); //打印数据信息结构 console.dir(div1); &#125;&lt;/script&gt;]]></content>
      <categories>
        <category>web前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>属性</tag>
        <tag>变量</tag>
        <tag>函数</tag>
      </tags>
  </entry>
</search>